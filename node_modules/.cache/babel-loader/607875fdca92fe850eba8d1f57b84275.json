{"ast":null,"code":"var _jsxFileName = \"/home/user/Desktop/Snake-Spike/spike-exercise-snake-game/react-snake-START-HERE/src/App.js\";\nimport Button from '@material-ui/core/Button';\nimport { useInterval } from \"./useInterval\"; //change\n\nimport React, { useState, useRef, useEffect } from \"react\"; //change\n//program variables\n\nconst boardGameSize = [window.innerWidth - 600, window.innerHeight - 200];\nlet totalScore = 0; //last key that was pushed in the game.\n//this helps avoid key collisions\n//Please refer to snakeKeyMovement method\n\nlet lastArrowPushed = 0;\nconst SNAKE_START = [//change\n[8, 7], [8, 8]];\nconst APPLE_START = [8, 3]; //change\n\nconst resizing = 60; //change\n\nlet snakeSpeed = 220;\nconst snakeDirectionList = {\n  //change\n  38: [0, -1],\n  // up  //change comment`\n  40: [0, 1],\n  // down  //change comment\n  37: [-1, 0],\n  // left  //change comment\n  39: [1, 0] // right //change comment\n\n}; ///////////////////////////////////\n//Edit everything below this line\n\nconst App = () => {\n  //change\n  const [youLose, setYouLose] = useState(false);\n  const canvasRef = useRef(); //change\n\n  const [snakeShapes, setSnake] = useState(SNAKE_START); //change\n\n  const [apple, setApple] = useState(APPLE_START); //change\n\n  const [directions, changeSnakeDirection] = useState([0, -1]); //change\n\n  const [speed, setSpeed] = useState(null); //change\n\n  useInterval(() => gameLoop(), speed); //change\n\n  const endGame = () => {\n    //change\n    setSpeed(null); //change\n\n    setYouLose(true); //change\n\n    alert(\"Nice Job! You ate \" + totalScore + \" apples!\");\n  };\n\n  const snakeKeyMovement = ({\n    keyCode\n  }) => {\n    console.log(\"snake is moving\");\n    console.log(keyCode);\n\n    if (keyCode === 38) {\n      console.log(\"Up ARROW pushed\");\n\n      if (!(lastArrowPushed === 40)) {\n        console.log(\"ALL IS GOOD\");\n        lastArrowPushed = 38;\n        changeSnakeDirection(snakeDirectionList[38]);\n      }\n    } else if (keyCode === 39) {\n      console.log(\"Right ARROW pushed\");\n\n      if (!(lastArrowPushed === 37)) {\n        console.log(\"ALL IS GOOD\");\n        lastArrowPushed = 39;\n        changeSnakeDirection(snakeDirectionList[39]);\n      }\n    } else if (keyCode === 40) {\n      console.log(\"Down ARRAOW pushed\");\n\n      if (!(lastArrowPushed === 38)) {\n        console.log(\"ALL IS GOOD\");\n        lastArrowPushed = 40;\n        changeSnakeDirection(snakeDirectionList[40]);\n      }\n    } else if (keyCode === 37) {\n      console.log(\"Left ARROW pushed\");\n\n      if (!(lastArrowPushed === 39)) {\n        console.log(\"All is good\");\n        lastArrowPushed = 37;\n        changeSnakeDirection(snakeDirectionList[37]);\n      }\n    }\n  };\n\n  const createApple = () => //change\n  apple.map((_a, i) => Math.floor(Math.random() * (boardGameSize[i] / resizing))); //change\n\n\n  const checkCollision = (piece, snk = snakeShapes) => {\n    //change\n    if ( //change\n    piece[0] * resizing >= boardGameSize[0] || //change\n    piece[0] < 0 || //change\n    piece[1] * resizing >= boardGameSize[1] || //change\n    piece[1] < 0 //change\n    ) return true; //change\n\n    for (const segment of snk) {\n      //change\n      if (piece[0] === segment[0] && piece[1] === segment[1]) return true; //change\n    }\n\n    return false; //change\n  };\n\n  const checkAppleCollision = newSnake => {\n    //change\n    if (newSnake[0][0] === apple[0] && newSnake[0][1] === apple[1]) {\n      //change\n      let newApple = createApple(); //change\n\n      while (checkCollision(newApple, newSnake)) {\n        //change \n        newApple = createApple(); //change \n      }\n\n      setApple(newApple); //change \n\n      if (snakeSpeed >= 90) {\n        snakeSpeed = snakeSpeed - 10;\n        setSpeed(snakeSpeed);\n      }\n\n      totalScore += 1;\n      return true; //change \n    }\n\n    return false; //change \n  };\n\n  const gameLoop = () => {\n    //change \n    const snakeCopy = JSON.parse(JSON.stringify(snakeShapes)); //change \n\n    const newSnakeHead = [snakeCopy[0][0] + directions[0], snakeCopy[0][1] + directions[1]]; //change \n\n    snakeCopy.unshift(newSnakeHead); //change \n\n    if (checkCollision(newSnakeHead)) endGame(); //change \n\n    if (!checkAppleCollision(snakeCopy)) snakeCopy.pop(); //change \n\n    setSnake(snakeCopy); //change \n  };\n\n  const startGame = () => {\n    //change \n    snakeSpeed = 180; //change \n\n    setSnake(SNAKE_START); //change \n\n    setApple(APPLE_START); //change \n\n    changeSnakeDirection([0, -1]); //change \n\n    setSpeed(snakeSpeed); //change \n\n    setYouLose(false); //change \n  };\n\n  useEffect(() => {\n    //change \n    const shapes = canvasRef.current.getContext(\"2d\"); //change \n\n    shapes.setTransform(resizing, 0, 0, resizing, 0, 0); //change \n\n    shapes.clearRect(0, 0, window.innerWidth, window.innerHeight); //change \n\n    shapes.fillStyle = 'rgba(78, 33, 0, 1)';\n    snakeShapes.forEach(([x, y]) => {\n      shapes.fillRect(x, y, .91, .91);\n    });\n    shapes.fillStyle = \"lightgreen\"; //change \n\n    shapes.fillRect(apple[0], apple[1], 1, 1); //change \n  }, [snakeShapes, apple, youLose]); //change \n\n  return (\n    /*#__PURE__*/\n    //change \n    React.createElement(\"div\", {\n      style: {\n        border: \"none\",\n        outline: \"none\"\n      },\n      onKeyDown: e => snakeKeyMovement(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      onClick: startGame,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 7\n      }\n    }, \"Play\"), /*#__PURE__*/React.createElement(\"center\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      style: {\n        border: \"1px solid black\"\n      },\n      ref: canvasRef,\n      width: `${boardGameSize[0]}px`,\n      height: `${boardGameSize[1]}px`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }\n    })))\n  ); //change \n};\n\nexport default App;","map":{"version":3,"sources":["/home/user/Desktop/Snake-Spike/spike-exercise-snake-game/react-snake-START-HERE/src/App.js"],"names":["Button","useInterval","React","useState","useRef","useEffect","boardGameSize","window","innerWidth","innerHeight","totalScore","lastArrowPushed","SNAKE_START","APPLE_START","resizing","snakeSpeed","snakeDirectionList","App","youLose","setYouLose","canvasRef","snakeShapes","setSnake","apple","setApple","directions","changeSnakeDirection","speed","setSpeed","gameLoop","endGame","alert","snakeKeyMovement","keyCode","console","log","createApple","map","_a","i","Math","floor","random","checkCollision","piece","snk","segment","checkAppleCollision","newSnake","newApple","snakeCopy","JSON","parse","stringify","newSnakeHead","unshift","pop","startGame","shapes","current","getContext","setTransform","clearRect","fillStyle","forEach","x","y","fillRect","border","outline","e"],"mappings":"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","sourcesContent":["import Button from '@material-ui/core/Button';\nimport { useInterval } from \"./useInterval\"; //change\nimport React, { useState, useRef, useEffect } from \"react\"; //change\n\n//program variables\n\nconst boardGameSize = [window.innerWidth - 600, window.innerHeight - 200];\nlet totalScore = 0;\n\n//last key that was pushed in the game.\n//this helps avoid key collisions\n//Please refer to snakeKeyMovement method\nlet lastArrowPushed = 0;\n\nconst SNAKE_START = [ //change\n  [8, 7],\n  [8, 8]\n];\nconst APPLE_START = [8, 3]; //change\nconst resizing = 60; //change\nlet snakeSpeed = 220;\nconst snakeDirectionList = {  //change\n  38: [0, -1], // up  //change comment`\n  40: [0, 1], // down  //change comment\n  37: [-1, 0], // left  //change comment\n  39: [1, 0] // right //change comment\n};\n\n\n///////////////////////////////////\n//Edit everything below this line\n\nconst App = () => { //change\n  const [youLose, setYouLose] = useState(false);\n\n  const canvasRef = useRef(); //change\n  const [snakeShapes, setSnake] = useState(SNAKE_START); //change\n  const [apple, setApple] = useState(APPLE_START); //change\n  const [directions, changeSnakeDirection] = useState([0, -1]); //change\n  const [speed, setSpeed] = useState(null); //change\n\n\n  useInterval(() => gameLoop(), speed); //change\n\n  const endGame = () => { //change\n    setSpeed(null); //change\n    setYouLose(true); //change\n    alert(\"Nice Job! You ate \" + totalScore + \" apples!\");\n  };\n\n    const snakeKeyMovement = ({keyCode}) => {\n      console.log(\"snake is moving\");\n      console.log(keyCode);\n      if(keyCode === 38) {\n        console.log(\"Up ARROW pushed\");\n        if(!(lastArrowPushed === 40)) {\n          console.log(\"ALL IS GOOD\")\n          lastArrowPushed = 38;\n          changeSnakeDirection(snakeDirectionList[38]);\n        }\n      } else if(keyCode ===  39) {\n        console.log(\"Right ARROW pushed\");\n        if(!(lastArrowPushed === 37)) {\n          console.log(\"ALL IS GOOD\");\n          lastArrowPushed = 39;\n          changeSnakeDirection(snakeDirectionList[39]);\n        }\n      } else if(keyCode === 40) {\n        console.log(\"Down ARRAOW pushed\");\n        if(!(lastArrowPushed === 38)) {\n          console.log(\"ALL IS GOOD\");\n          lastArrowPushed = 40;\n          changeSnakeDirection(snakeDirectionList[40]);\n        }\n      } else if(keyCode === 37) {\n        console.log(\"Left ARROW pushed\");\n        if(!(lastArrowPushed === 39)) {\n          console.log(\"All is good\");\n          lastArrowPushed = 37;\n          changeSnakeDirection(snakeDirectionList[37]);\n        }\n      }\n    }\n\n\n  const createApple = () => //change\n    apple.map((_a, i) => Math.floor(Math.random() * (boardGameSize[i] / resizing))); //change\n\n  const checkCollision = (piece, snk = snakeShapes) => { //change\n    if ( //change\n      piece[0] * resizing >= boardGameSize[0] || //change\n      piece[0] < 0 || //change\n      piece[1] * resizing >= boardGameSize[1] || //change\n      piece[1] < 0 //change\n    )\n      return true; //change\n\n    for (const segment of snk) { //change\n      if (piece[0] === segment[0] && piece[1] === segment[1]) return true; //change\n    }\n    return false; //change\n  };\n\n  const checkAppleCollision = newSnake => { //change\n    if (newSnake[0][0] === apple[0] && newSnake[0][1] === apple[1]) { //change\n      let newApple = createApple(); //change\n      while (checkCollision(newApple, newSnake)) {//change \n        newApple = createApple();//change \n      }\n      setApple(newApple);//change \n      if(snakeSpeed >= 90) {\n        snakeSpeed = snakeSpeed - 10;\n        setSpeed(snakeSpeed);\n      }\n      totalScore += 1;\n      return true;//change \n    }\n    return false;//change \n  };\n\n\n  const gameLoop = () => {//change \n    const snakeCopy = JSON.parse(JSON.stringify(snakeShapes));//change \n    const newSnakeHead = [snakeCopy[0][0] + directions[0], snakeCopy[0][1] + directions[1]];//change \n    snakeCopy.unshift(newSnakeHead);//change \n    if (checkCollision(newSnakeHead)) endGame();//change \n    if (!checkAppleCollision(snakeCopy)) snakeCopy.pop();//change \n    setSnake(snakeCopy);//change \n  };\n\n  const startGame = () => {//change \n    snakeSpeed = 180; //change \n    setSnake(SNAKE_START); //change \n    setApple(APPLE_START); //change \n    changeSnakeDirection([0, -1]); //change \n    setSpeed(snakeSpeed); //change \n    setYouLose(false); //change \n  };\n\n  useEffect(() => { //change \n    const shapes = canvasRef.current.getContext(\"2d\");//change \n    shapes.setTransform(resizing, 0, 0, resizing, 0, 0); //change \n    shapes.clearRect(0, 0, window.innerWidth, window.innerHeight); //change \n    shapes.fillStyle = 'rgba(78, 33, 0, 1)';\n    \n    snakeShapes.forEach(([x, y]) => {\n      shapes.fillRect(x, y, .91, .91);\n    });\n    shapes.fillStyle = \"lightgreen\"; //change \n    shapes.fillRect(apple[0], apple[1], 1, 1);  //change \n  }, [snakeShapes, apple, youLose]); //change \n\n  return ( //change \n    <div style={{ border: \"none\", outline: \"none\"  }} onKeyDown={e => snakeKeyMovement(e)}> \n\n      <Button variant=\"contained\" color=\"secondary\" onClick={startGame}>\n        Play\n      </Button>\n\n      <center>\n\n        <canvas\n          style={{ border: \"1px solid black\" }}\n          ref={canvasRef}\n          width={`${boardGameSize[0]}px`}\n          height={`${boardGameSize[1]}px`}\n        />\n\n      </center>\n\n    </div>\n  ); //change \n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}