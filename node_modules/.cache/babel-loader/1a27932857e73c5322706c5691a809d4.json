{"ast":null,"code":"var _jsxFileName = \"/home/user/Desktop/Snake-Spike/spike-exercise-snake-game/react-snake-START-HERE/src/App.js\";\nimport Button from '@material-ui/core/Button';\nimport { useInterval as setLoopSpeed } from \"./useInterval\"; //change\n\nimport React, { useState, useRef, useEffect } from \"react\"; //change\n//program variables\n\nconst boardGameSize = [window.innerWidth - 600, window.innerHeight - 200];\nlet totalScore = 0;\nconst snakeCoordinates = [[11, 10]]; //last key that was pushed in the game.\n//this helps avoid key collisions\n//Please refer to snakeKeyMovement method\n\nlet lastArrowPushed = 0;\nlet appleCoordinates = [Math.floor(Math.random() * 5), Math.floor(Math.random() * 5)];\nconst resizing = 34; //change\n\nlet snakeSpeed = 220; //Creates a new target rectangle for the snake to eat upon collision\n\nfunction createNewTargetShape(snakeEatsTargetShape, newTargetShape, arrayCopy, createNewTargetShape) {\n  while (snakeEatsTargetShape(newTargetShape, arrayCopy)) {\n    newTargetShape = createNewTargetShape();\n  }\n\n  return newTargetShape;\n}\n\nconst App = () => {\n  let [youLose, setYouLose] = useState(false);\n  let canvas = useRef();\n  let [snakeShapes, startingSnakePosition] = useState(snakeCoordinates); //change\n\n  let [targetShape, targetShapeLocation] = useState(appleCoordinates); //change\n\n  let [snakeDirections, changeSnakeDirection] = useState([0, -1]);\n  let [snakeSpeed, setSnakeSpeed] = useState(null);\n  setLoopSpeed(() => snakeController(), snakeSpeed);\n\n  function stopMovement() {\n    setSnakeSpeed(null);\n    setYouLose(true); //Give alert message\n\n    alert(\"Nice Job! You ate \" + totalScore + \" apples!\");\n  }\n\n  const snakeKeyMovement = ({\n    keyCode\n  }) => {\n    console.log(\"snake is moving\");\n    console.log(keyCode);\n\n    if (keyCode === 38) {\n      console.log(\"Up ARROW pushed\");\n\n      if (!(lastArrowPushed === 40)) {\n        console.log(\"ALL IS GOOD\");\n        lastArrowPushed = 38;\n        changeSnakeDirection([0, -1]);\n      }\n    } else if (keyCode === 39) {\n      console.log(\"Right ARROW pushed\");\n\n      if (!(lastArrowPushed === 37)) {\n        console.log(\"ALL IS GOOD\");\n        lastArrowPushed = 39;\n        changeSnakeDirection([1, 0]);\n      }\n    } else if (keyCode === 40) {\n      console.log(\"Down ARRAOW pushed\");\n\n      if (!(lastArrowPushed === 38)) {\n        console.log(\"ALL IS GOOD\");\n        lastArrowPushed = 40;\n        changeSnakeDirection([0, 1]);\n      }\n    } else if (keyCode === 37) {\n      console.log(\"Left ARROW pushed\");\n\n      if (!(lastArrowPushed === 39)) {\n        console.log(\"All is good\");\n        lastArrowPushed = 37;\n        changeSnakeDirection([-1, 0]);\n      }\n    }\n  };\n\n  const playSnakeGame = () => {\n    //adjust snake speed here\n    snakeSpeed = 180;\n    appleCoordinates = [Math.floor(Math.random() * 5), Math.floor(Math.random() * 5)];\n    totalScore = 0;\n    targetShapeLocation(appleCoordinates);\n    startingSnakePosition(snakeCoordinates);\n    changeSnakeDirection([0, -1]); //change \n\n    setSnakeSpeed(snakeSpeed); //change \n\n    setYouLose(false); //change \n  };\n\n  const createNewTargetShape = () => //change\n  targetShape.map((_a, i) => Math.floor(Math.random() * (boardGameSize[i] / resizing))); //change\n\n\n  const snakeEatsTargetShape = (piece, snk = snakeShapes) => {\n    //change\n    if ( //change\n    piece[0] * resizing >= boardGameSize[0] || //change\n    piece[0] < 0 || //change\n    piece[1] * resizing >= boardGameSize[1] || //change\n    piece[1] < 0 //change\n    ) return true; //change\n\n    for (const segment of snk) {\n      //change\n      if (piece[0] === segment[0] && piece[1] === segment[1]) return true; //change\n    }\n\n    return false; //change\n  };\n\n  const snakeEatsApple = arrayCopy => {\n    if (targetShape[0] === arrayCopy[0][0] && targetShape[1] === arrayCopy[0][1]) {\n      //creates a new target shape for the snake\n      let newTargetShape = createNewTargetShape();\n      newTargetShape = createNewTargetShape(snakeEatsTargetShape, newTargetShape, arrayCopy, createNewTargetShape);\n      targetShapeLocation(newTargetShape);\n\n      if (snakeSpeed >= 70) {\n        snakeSpeed = snakeSpeed - 10;\n        setSnakeSpeed(snakeSpeed);\n      }\n\n      totalScore += 1;\n      return true;\n    }\n\n    return false;\n  };\n\n  const snakeController = () => {\n    //change \n    const snakeCopy = JSON.parse(JSON.stringify(snakeShapes)); //change \n\n    const newSnakeHead = [snakeCopy[0][0] + snakeDirections[0], snakeCopy[0][1] + snakeDirections[1]]; //change \n\n    snakeCopy.unshift(newSnakeHead); //change \n\n    if (snakeEatsTargetShape(newSnakeHead)) stopMovement(); //change \n\n    if (!snakeEatsApple(snakeCopy)) snakeCopy.pop(); //change \n\n    startingSnakePosition(snakeCopy); //change \n  };\n\n  useEffect(() => {\n    //change \n    const shapes = canvas.current.getContext(\"2d\"); //change \n\n    shapes.setTransform(resizing, 0, 0, resizing, 0, 0); //change \n\n    let snakeGradient = shapes.createLinearGradient(255, 50, 50, 200);\n    snakeGradient.addColorStop(0, \"brown\");\n    snakeGradient.addColorStop(1, \"black\");\n    shapes.clearRect(0, 0, window.innerWidth, window.innerHeight); //change \n\n    snakeShapes.forEach(([x, y]) => {\n      shapes.fillStyle = snakeGradient;\n      shapes.fillRect(x, y, .91, .91);\n    });\n    shapes.fillStyle = \"red\"; //change \n\n    shapes.fillRect(targetShape[0], targetShape[1], 1, 1); //change \n  }, [snakeShapes, targetShape, youLose]); //change \n\n  return (\n    /*#__PURE__*/\n    //change \n    React.createElement(\"div\", {\n      onKeyDown: e => snakeKeyMovement(e),\n      style: {\n        border: \"none\",\n        outline: \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      onClick: playSnakeGame,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 7\n      }\n    }, \"Play\"), /*#__PURE__*/React.createElement(\"center\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      style: {\n        border: \"1px solid black\"\n      },\n      ref: canvas,\n      width: `${boardGameSize[0]}px`,\n      height: `${boardGameSize[1]}px`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }\n    })))\n  ); //change \n};\n\nexport default App;","map":{"version":3,"sources":["/home/user/Desktop/Snake-Spike/spike-exercise-snake-game/react-snake-START-HERE/src/App.js"],"names":["Button","useInterval","setLoopSpeed","React","useState","useRef","useEffect","boardGameSize","window","innerWidth","innerHeight","totalScore","snakeCoordinates","lastArrowPushed","appleCoordinates","Math","floor","random","resizing","snakeSpeed","createNewTargetShape","snakeEatsTargetShape","newTargetShape","arrayCopy","App","youLose","setYouLose","canvas","snakeShapes","startingSnakePosition","targetShape","targetShapeLocation","snakeDirections","changeSnakeDirection","setSnakeSpeed","snakeController","stopMovement","alert","snakeKeyMovement","keyCode","console","log","playSnakeGame","map","_a","i","piece","snk","segment","snakeEatsApple","snakeCopy","JSON","parse","stringify","newSnakeHead","unshift","pop","shapes","current","getContext","setTransform","snakeGradient","createLinearGradient","addColorStop","clearRect","forEach","x","y","fillStyle","fillRect","e","border","outline"],"mappings":"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","sourcesContent":["import Button from '@material-ui/core/Button';\nimport { useInterval as setLoopSpeed } from \"./useInterval\"; //change\nimport React, { useState, useRef, useEffect } from \"react\"; //change\n\n//program variables\n\nconst boardGameSize = [window.innerWidth - 600, window.innerHeight - 200];\nlet totalScore = 0;\nconst snakeCoordinates = [[11, 10]];\n//last key that was pushed in the game.\n//this helps avoid key collisions\n//Please refer to snakeKeyMovement method\nlet lastArrowPushed = 0;\nlet appleCoordinates = [Math.floor(Math.random() * 5), Math.floor(Math.random() * 5)];\nconst resizing = 34; //change\nlet snakeSpeed = 220;\n\n//Creates a new target rectangle for the snake to eat upon collision\nfunction createNewTargetShape(snakeEatsTargetShape, newTargetShape, arrayCopy, createNewTargetShape) {\n  while (snakeEatsTargetShape(newTargetShape, arrayCopy)) {\n    newTargetShape = createNewTargetShape();\n  }\n  return newTargetShape;\n}\n\nconst App = () => {\n  let [youLose, setYouLose] = useState(false);\n  let canvas = useRef();\n  let [snakeShapes, startingSnakePosition] = useState(snakeCoordinates); //change\n  let [targetShape, targetShapeLocation] = useState(appleCoordinates); //change\n  let [snakeDirections, changeSnakeDirection] = useState([0, -1]);\n  let [snakeSpeed, setSnakeSpeed] = useState(null);\n\n\n  setLoopSpeed(() => snakeController(), snakeSpeed);\n\n  function stopMovement() {\n    setSnakeSpeed(null);\n    setYouLose(true);\n    //Give alert message\n    alert(\"Nice Job! You ate \" + totalScore + \" apples!\");\n  }\n\n    const snakeKeyMovement = ({keyCode}) => {\n      console.log(\"snake is moving\");\n      console.log(keyCode);\n      if(keyCode === 38) {\n        console.log(\"Up ARROW pushed\");\n        if(!(lastArrowPushed === 40)) {\n          console.log(\"ALL IS GOOD\")\n          lastArrowPushed = 38;\n          changeSnakeDirection([0, -1]);\n        }\n      } else if(keyCode ===  39) {\n        console.log(\"Right ARROW pushed\");\n        if(!(lastArrowPushed === 37)) {\n          console.log(\"ALL IS GOOD\");\n          lastArrowPushed = 39;\n          changeSnakeDirection([1, 0]);\n        }\n      } else if(keyCode === 40) {\n        console.log(\"Down ARRAOW pushed\");\n        if(!(lastArrowPushed === 38)) {\n          console.log(\"ALL IS GOOD\");\n          lastArrowPushed = 40;\n          changeSnakeDirection([0, 1]);\n        }\n      } else if(keyCode === 37) {\n        console.log(\"Left ARROW pushed\");\n        if(!(lastArrowPushed === 39)) {\n          console.log(\"All is good\");\n          lastArrowPushed = 37;\n          changeSnakeDirection([-1, 0]);\n        }\n      }\n    }\n\n  const playSnakeGame = () => {\n    //adjust snake speed here\n    snakeSpeed = 180;\n    appleCoordinates = [Math.floor(Math.random() * 5), Math.floor(Math.random() * 5)];\n    totalScore = 0;\n    targetShapeLocation(appleCoordinates);\n    startingSnakePosition(snakeCoordinates);\n\n    changeSnakeDirection([0, -1]); //change \n    setSnakeSpeed(snakeSpeed); //change \n    setYouLose(false); //change \n  };\n\n\n  const createNewTargetShape = () => //change\n    targetShape.map((_a, i) => Math.floor(Math.random() * (boardGameSize[i] / resizing))); //change\n\n  const snakeEatsTargetShape = (piece, snk = snakeShapes) => { //change\n    if ( //change\n      piece[0] * resizing >= boardGameSize[0] || //change\n      piece[0] < 0 || //change\n      piece[1] * resizing >= boardGameSize[1] || //change\n      piece[1] < 0 //change\n    )\n      return true; //change\n\n    for (const segment of snk) { //change\n      if (piece[0] === segment[0] && piece[1] === segment[1]) return true; //change\n    }\n    return false; //change\n  };\n\n  const snakeEatsApple = arrayCopy => { \n    if ((targetShape[0] === arrayCopy[0][0]) && (targetShape[1] === arrayCopy[0][1])) {\n      //creates a new target shape for the snake\n      let newTargetShape = createNewTargetShape();\n      newTargetShape = createNewTargetShape(snakeEatsTargetShape, newTargetShape, arrayCopy, createNewTargetShape);\n      targetShapeLocation(newTargetShape);\n      if(snakeSpeed >= 70) \n      {\n        snakeSpeed = snakeSpeed - 10;\n        setSnakeSpeed(snakeSpeed);\n      }\n      totalScore += 1;\n      return true;\n    }\n    return false;\n  };\n\n\n  const snakeController = () => {//change \n    const snakeCopy = JSON.parse(JSON.stringify(snakeShapes));//change \n    const newSnakeHead = [snakeCopy[0][0] + snakeDirections[0], snakeCopy[0][1] + snakeDirections[1]];//change \n    snakeCopy.unshift(newSnakeHead);//change \n    if (snakeEatsTargetShape(newSnakeHead)) stopMovement();//change \n    if (!snakeEatsApple(snakeCopy)) snakeCopy.pop();//change \n    startingSnakePosition(snakeCopy);//change \n  };\n\n\n\n  useEffect(() => { //change \n    const shapes = canvas.current.getContext(\"2d\");//change \n    shapes.setTransform(resizing, 0, 0, resizing, 0, 0); //change \n    let snakeGradient = shapes.createLinearGradient(255, 50, 50, 200);\n    snakeGradient.addColorStop(0, \"brown\");\n    snakeGradient.addColorStop(1, \"black\");\n    shapes.clearRect(0, 0, window.innerWidth, window.innerHeight); //change \n    \n    snakeShapes.forEach(([x, y]) => {\n      shapes.fillStyle = snakeGradient;\n      shapes.fillRect(x, y, .91, .91);\n    });\n    shapes.fillStyle = \"red\"; //change \n    shapes.fillRect(targetShape[0], targetShape[1], 1, 1);  //change \n  }, [snakeShapes, targetShape, youLose]); //change \n\n  return ( //change \n    <div onKeyDown={e => snakeKeyMovement(e)} style={{ border: \"none\", outline: \"none\"  }}  > \n\n      <Button variant=\"contained\" color=\"secondary\" onClick={playSnakeGame}>\n        Play\n      </Button>\n\n      <center>\n\n        <canvas\n          style={{ border: \"1px solid black\" }}\n          ref={canvas}\n          width={`${boardGameSize[0]}px`}\n          height={`${boardGameSize[1]}px`}\n        />\n\n      </center>\n\n    </div>\n  ); //change \n};\n\nexport default App;\n\n\n"]},"metadata":{},"sourceType":"module"}