{"ast":null,"code":"var _jsxFileName = \"/home/user/Desktop/Snake-Spike/spike-exercise-snake-game/react-snake-START-HERE/src/App.js\";\nimport React, { useState, useRef, useEffect } from \"react\"; //change\n\nimport { useInterval } from \"./useInterval\"; //change\n//program variables\n\nconst CANVAS_SIZE = [window.innerWidth - 100, window.innerHeight - 100]; //change const name\n\nconst SNAKE_START = [//change\n[8, 7], [8, 8]];\nconst APPLE_START = [8, 3]; //change\n\nconst SCALE = 75; //change\n\nlet snakeSpeed = 400;\nconst DIRECTIONS = {\n  //change\n  38: [0, -1],\n  // up  //change comment`\n  40: [0, 1],\n  // down  //change comment\n  37: [-1, 0],\n  // left  //change comment\n  39: [1, 0] // right //change comment\n\n}; ///////////////////////////////////\n//Edit everything below this line\n\nconst App = () => {\n  //change\n  const canvasRef = useRef(); //change\n\n  const [snake, setSnake] = useState(SNAKE_START); //change\n\n  const [apple, setApple] = useState(APPLE_START); //change\n\n  const [dir, setDir] = useState([0, -1]); //change\n\n  const [speed, setSpeed] = useState(null); //change\n\n  const [gameOver, setGameOver] = useState(false); //change\n\n  useInterval(() => gameLoop(), speed); //change\n\n  const endGame = () => {\n    //change\n    setSpeed(null); //change\n\n    setGameOver(true); //change\n  };\n\n  const moveSnake = ({\n    keyCode\n  }) => keyCode >= 37 && keyCode <= 40 && setDir(DIRECTIONS[keyCode]) && console.log(\"moving\"); //change\n\n\n  const createApple = () => apple.map((_a, i) => Math.floor(Math.random() * (CANVAS_SIZE[i] / SCALE)));\n\n  const checkCollision = (piece, snk = snake) => {\n    if (piece[0] * SCALE >= CANVAS_SIZE[0] || piece[0] < 0 || piece[1] * SCALE >= CANVAS_SIZE[1] || piece[1] < 0) return true;\n\n    for (const segment of snk) {\n      if (piece[0] === segment[0] && piece[1] === segment[1]) return true;\n    }\n\n    return false;\n  };\n\n  const checkAppleCollision = newSnake => {\n    if (newSnake[0][0] === apple[0] && newSnake[0][1] === apple[1]) {\n      let newApple = createApple();\n\n      while (checkCollision(newApple, newSnake)) {\n        newApple = createApple();\n      }\n\n      setApple(newApple);\n      return true;\n    }\n\n    return false;\n  };\n\n  const gameLoop = () => {\n    const snakeCopy = JSON.parse(JSON.stringify(snake));\n    const newSnakeHead = [snakeCopy[0][0] + dir[0], snakeCopy[0][1] + dir[1]];\n    snakeCopy.unshift(newSnakeHead);\n    if (checkCollision(newSnakeHead)) endGame();\n    if (!checkAppleCollision(snakeCopy)) snakeCopy.pop();\n    setSnake(snakeCopy);\n  };\n\n  const startGame = () => {\n    snakeSpeed = 500;\n    setSnake(SNAKE_START);\n    setApple(APPLE_START);\n    setDir([0, -1]);\n    setSpeed(snakeSpeed);\n    setGameOver(false);\n  };\n\n  useEffect(() => {\n    const context = canvasRef.current.getContext(\"2d\");\n    context.setTransform(SCALE, 0, 0, SCALE, 0, 0);\n    context.clearRect(0, 0, window.innerWidth, window.innerHeight);\n    context.fillStyle = \"pink\";\n    snake.forEach(([x, y]) => context.fillRect(x, y, 1, 1));\n    context.fillStyle = \"lightblue\";\n    context.fillRect(apple[0], apple[1], 1, 1);\n  }, [snake, apple, gameOver]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    role: \"button\",\n    tabIndex: \"0\",\n    onKeyDown: e => moveSnake(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"center\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    style: {\n      border: \"1px solid black\"\n    },\n    ref: canvasRef,\n    width: `${CANVAS_SIZE[0]}px`,\n    height: `${CANVAS_SIZE[1]}px`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  })), gameOver && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 20\n    }\n  }, \"GAME OVER!\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: startGame,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }\n  }, \"Start Game\"));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/user/Desktop/Snake-Spike/spike-exercise-snake-game/react-snake-START-HERE/src/App.js"],"names":["React","useState","useRef","useEffect","useInterval","CANVAS_SIZE","window","innerWidth","innerHeight","SNAKE_START","APPLE_START","SCALE","snakeSpeed","DIRECTIONS","App","canvasRef","snake","setSnake","apple","setApple","dir","setDir","speed","setSpeed","gameOver","setGameOver","gameLoop","endGame","moveSnake","keyCode","console","log","createApple","map","_a","i","Math","floor","random","checkCollision","piece","snk","segment","checkAppleCollision","newSnake","newApple","snakeCopy","JSON","parse","stringify","newSnakeHead","unshift","pop","startGame","context","current","getContext","setTransform","clearRect","fillStyle","forEach","x","y","fillRect","e","border"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\"; //change\nimport { useInterval } from \"./useInterval\"; //change\n\n//program variables\n\nconst CANVAS_SIZE = [window.innerWidth - 100, window.innerHeight - 100]; //change const name\nconst SNAKE_START = [ //change\n  [8, 7],\n  [8, 8]\n];\nconst APPLE_START = [8, 3]; //change\nconst SCALE = 75; //change\nlet snakeSpeed = 400;\nconst DIRECTIONS = {  //change\n  38: [0, -1], // up  //change comment`\n  40: [0, 1], // down  //change comment\n  37: [-1, 0], // left  //change comment\n  39: [1, 0] // right //change comment\n};\n\n\n///////////////////////////////////\n//Edit everything below this line\n\nconst App = () => { //change\n  const canvasRef = useRef(); //change\n  const [snake, setSnake] = useState(SNAKE_START); //change\n  const [apple, setApple] = useState(APPLE_START); //change\n  const [dir, setDir] = useState([0, -1]); //change\n  const [speed, setSpeed] = useState(null); //change\n  const [gameOver, setGameOver] = useState(false); //change\n\n  useInterval(() => gameLoop(), speed); //change\n\n  const endGame = () => { //change\n    setSpeed(null); //change\n    setGameOver(true); //change\n  };\n\n    const moveSnake = ({keyCode}) => keyCode >= 37 && keyCode <= 40 && setDir(DIRECTIONS[keyCode]) && console.log(\"moving\"); //change\n\n\n  const createApple = () =>\n    apple.map((_a, i) => Math.floor(Math.random() * (CANVAS_SIZE[i] / SCALE)));\n\n  const checkCollision = (piece, snk = snake) => {\n    if (\n      piece[0] * SCALE >= CANVAS_SIZE[0] ||\n      piece[0] < 0 ||\n      piece[1] * SCALE >= CANVAS_SIZE[1] ||\n      piece[1] < 0\n    )\n      return true;\n\n    for (const segment of snk) {\n      if (piece[0] === segment[0] && piece[1] === segment[1]) return true;\n    }\n    return false;\n  };\n\n  const checkAppleCollision = newSnake => {\n    if (newSnake[0][0] === apple[0] && newSnake[0][1] === apple[1]) {\n      let newApple = createApple();\n      while (checkCollision(newApple, newSnake)) {\n        newApple = createApple();\n      }\n      setApple(newApple);\n      return true;\n    }\n    return false;\n  };\n\n  const gameLoop = () => {\n    const snakeCopy = JSON.parse(JSON.stringify(snake));\n    const newSnakeHead = [snakeCopy[0][0] + dir[0], snakeCopy[0][1] + dir[1]];\n    snakeCopy.unshift(newSnakeHead);\n    if (checkCollision(newSnakeHead)) endGame();\n    if (!checkAppleCollision(snakeCopy)) snakeCopy.pop();\n    setSnake(snakeCopy);\n  };\n\n  const startGame = () => {\n    snakeSpeed = 500;\n    setSnake(SNAKE_START);\n    setApple(APPLE_START);\n    setDir([0, -1]);\n    setSpeed(snakeSpeed);\n    setGameOver(false);\n  };\n\n  useEffect(() => {\n    const context = canvasRef.current.getContext(\"2d\");\n    context.setTransform(SCALE, 0, 0, SCALE, 0, 0);\n    context.clearRect(0, 0, window.innerWidth, window.innerHeight);\n    context.fillStyle = \"pink\";\n    snake.forEach(([x, y]) => context.fillRect(x, y, 1, 1));\n    context.fillStyle = \"lightblue\";\n    context.fillRect(apple[0], apple[1], 1, 1);\n  }, [snake, apple, gameOver]);\n\n  return (\n    <div role=\"button\" tabIndex=\"0\" onKeyDown={e => moveSnake(e)}>\n        <center>\n      <canvas\n        style={{ border: \"1px solid black\" }}\n        ref={canvasRef}\n        width={`${CANVAS_SIZE[0]}px`}\n        height={`${CANVAS_SIZE[1]}px`}\n      />\n      </center>\n      {gameOver && <div>GAME OVER!</div>}\n      <button onClick={startGame}>Start Game</button>\n    </div>\n  );\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}