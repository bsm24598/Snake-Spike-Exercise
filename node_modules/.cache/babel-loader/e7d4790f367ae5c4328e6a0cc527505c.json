{"ast":null,"code":"var _jsxFileName = \"/home/user/Desktop/Snake-Spike/spike-exercise-snake-game/react-snake-START-HERE/src/App.js\";\nimport Button from '@material-ui/core/Button';\nimport { useInterval } from \"./useInterval\"; //change\n\nimport React, { useState, useRef, useEffect } from \"react\"; //change\n//program variables\n//npm install @material-ui/core\n\nconst boardGameSize = [window.innerWidth - 200, window.innerHeight - 200];\nlet totalScore = 0; //last key that was pushed in the game.\n//this helps avoid key collisions\n//Please refer to snakeKeyMovement method\n\nlet lastArrowPushed = 0;\nconst SNAKE_START = [//change\n[8, 7], [8, 8]];\nconst APPLE_START = [8, 3]; //change\n\nconst SCALE = 60; //change\n\nlet snakeSpeed = 220;\nconst snakeDirectionList = {\n  //change\n  38: [0, -1],\n  // up  //change comment`\n  40: [0, 1],\n  // down  //change comment\n  37: [-1, 0],\n  // left  //change comment\n  39: [1, 0] // right //change comment\n\n}; ///////////////////////////////////\n//Edit everything below this line\n\nconst App = () => {\n  //change\n  const canvasRef = useRef(); //change\n\n  const [snake, setSnake] = useState(SNAKE_START); //change\n\n  const [apple, setApple] = useState(APPLE_START); //change\n\n  const [directions, changeSnakeDirection] = useState([0, -1]); //change\n\n  const [speed, setSpeed] = useState(null); //change\n\n  const [gameOver, setGameOver] = useState(false); //change\n\n  useInterval(() => gameLoop(), speed); //change\n\n  const endGame = () => {\n    //change\n    setSpeed(null); //change\n\n    setGameOver(true); //change\n  };\n\n  const snakeKeyMovement = ({\n    keyCode\n  }) => {\n    console.log(\"snake is moving\");\n    console.log(keyCode);\n\n    if (keyCode === 38) {\n      console.log(\"Up ARROW pushed\");\n\n      if (!(lastArrowPushed === 40)) {\n        console.log(\"ALL IS GOOD\");\n        lastArrowPushed = 38;\n        changeSnakeDirection(snakeDirectionList[38]);\n      }\n    } else if (keyCode === 39) {\n      console.log(\"Right ARROW pushed\");\n\n      if (!(lastArrowPushed === 37)) {\n        console.log(\"ALL IS GOOD\");\n        lastArrowPushed = 39;\n        changeSnakeDirection(snakeDirectionList[39]);\n      }\n    } else if (keyCode === 40) {\n      console.log(\"Down ARRAOW pushed\");\n\n      if (!(lastArrowPushed === 38)) {\n        console.log(\"ALL IS GOOD\");\n        lastArrowPushed = 40;\n        changeSnakeDirection(snakeDirectionList[40]);\n      }\n    } else if (keyCode === 37) {\n      console.log(\"Left ARROW pushed\");\n\n      if (!(lastArrowPushed === 39)) {\n        console.log(\"All is good\");\n        lastArrowPushed = 37;\n        changeSnakeDirection(snakeDirectionList[37]);\n      }\n    }\n  };\n\n  const createApple = () => //change\n  apple.map((_a, i) => Math.floor(Math.random() * (boardGameSize[i] / SCALE))); //change\n\n\n  const checkCollision = (piece, snk = snake) => {\n    //change\n    if ( //change\n    piece[0] * SCALE >= boardGameSize[0] || //change\n    piece[0] < 0 || //change\n    piece[1] * SCALE >= boardGameSize[1] || //change\n    piece[1] < 0 //change\n    ) return true; //change\n\n    for (const segment of snk) {\n      //change\n      if (piece[0] === segment[0] && piece[1] === segment[1]) return true; //change\n    }\n\n    return false; //change\n  };\n\n  const checkAppleCollision = newSnake => {\n    //change\n    if (newSnake[0][0] === apple[0] && newSnake[0][1] === apple[1]) {\n      //change\n      let newApple = createApple(); //change\n\n      while (checkCollision(newApple, newSnake)) {\n        //change \n        newApple = createApple(); //change \n      }\n\n      setApple(newApple); //change \n\n      if (snakeSpeed >= 90) {\n        snakeSpeed = snakeSpeed - 10;\n        setSpeed(snakeSpeed);\n      }\n\n      return true; //change \n    }\n\n    return false; //change \n  };\n\n  const gameLoop = () => {\n    //change \n    const snakeCopy = JSON.parse(JSON.stringify(snake)); //change \n\n    const newSnakeHead = [snakeCopy[0][0] + directions[0], snakeCopy[0][1] + directions[1]]; //change \n\n    snakeCopy.unshift(newSnakeHead); //change \n\n    if (checkCollision(newSnakeHead)) endGame(); //change \n\n    if (!checkAppleCollision(snakeCopy)) snakeCopy.pop(); //change \n\n    setSnake(snakeCopy); //change \n  };\n\n  const startGame = () => {\n    //change \n    snakeSpeed = 180; //change \n\n    setSnake(SNAKE_START); //change \n\n    setApple(APPLE_START); //change \n\n    changeSnakeDirection([0, -1]); //change \n\n    setSpeed(snakeSpeed); //change \n\n    setGameOver(false); //change \n  };\n\n  useEffect(() => {\n    //change \n    const context = canvasRef.current.getContext(\"2d\"); //change \n\n    context.setTransform(SCALE, 0, 0, SCALE, 0, 0); //change \n\n    context.clearRect(0, 0, window.innerWidth, window.innerHeight); //change \n\n    context.fillStyle = \"black\"; //change \n\n    snake.forEach(([x, y]) => context.fillRect(x, y, 1, 1)); //change \n\n    context.fillStyle = \"lightgreen\"; //change \n\n    context.fillRect(apple[0], apple[1], 1, 1); //change \n  }, [snake, apple, gameOver]); //change \n\n  return (\n    /*#__PURE__*/\n    //change \n    React.createElement(\"div\", {\n      tabIndex: \"0\",\n      onKeyDown: e => snakeKeyMovement(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 7\n      }\n    }, \"Hello World\"), /*#__PURE__*/React.createElement(\"center\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      style: {\n        border: \"1px solid black\"\n      },\n      ref: canvasRef,\n      width: `${boardGameSize[0]}px`,\n      height: `${boardGameSize[1]}px`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }\n    })), gameOver && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 20\n      }\n    }, \"GAME OVER!\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: startGame,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 7\n      }\n    }, \"Start Game\"))\n  ); //change \n};\n\nexport default App;","map":{"version":3,"sources":["/home/user/Desktop/Snake-Spike/spike-exercise-snake-game/react-snake-START-HERE/src/App.js"],"names":["Button","useInterval","React","useState","useRef","useEffect","boardGameSize","window","innerWidth","innerHeight","totalScore","lastArrowPushed","SNAKE_START","APPLE_START","SCALE","snakeSpeed","snakeDirectionList","App","canvasRef","snake","setSnake","apple","setApple","directions","changeSnakeDirection","speed","setSpeed","gameOver","setGameOver","gameLoop","endGame","snakeKeyMovement","keyCode","console","log","createApple","map","_a","i","Math","floor","random","checkCollision","piece","snk","segment","checkAppleCollision","newSnake","newApple","snakeCopy","JSON","parse","stringify","newSnakeHead","unshift","pop","startGame","context","current","getContext","setTransform","clearRect","fillStyle","forEach","x","y","fillRect","e","border"],"mappings":"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","sourcesContent":["import Button from '@material-ui/core/Button';\nimport { useInterval } from \"./useInterval\"; //change\nimport React, { useState, useRef, useEffect } from \"react\"; //change\n\n//program variables\n\n//npm install @material-ui/core\n\n\nconst boardGameSize = [window.innerWidth - 200, window.innerHeight - 200];\nlet totalScore = 0;\n\n//last key that was pushed in the game.\n//this helps avoid key collisions\n//Please refer to snakeKeyMovement method\nlet lastArrowPushed = 0;\n\n\nconst SNAKE_START = [ //change\n  [8, 7],\n  [8, 8]\n];\nconst APPLE_START = [8, 3]; //change\nconst SCALE = 60; //change\nlet snakeSpeed = 220;\nconst snakeDirectionList = {  //change\n  38: [0, -1], // up  //change comment`\n  40: [0, 1], // down  //change comment\n  37: [-1, 0], // left  //change comment\n  39: [1, 0] // right //change comment\n};\n\n\n///////////////////////////////////\n//Edit everything below this line\n\nconst App = () => { //change\n  const canvasRef = useRef(); //change\n  const [snake, setSnake] = useState(SNAKE_START); //change\n  const [apple, setApple] = useState(APPLE_START); //change\n  const [directions, changeSnakeDirection] = useState([0, -1]); //change\n  const [speed, setSpeed] = useState(null); //change\n  const [gameOver, setGameOver] = useState(false); //change\n\n  useInterval(() => gameLoop(), speed); //change\n\n  const endGame = () => { //change\n    setSpeed(null); //change\n    setGameOver(true); //change\n  };\n\n    const snakeKeyMovement = ({keyCode}) => {\n      console.log(\"snake is moving\");\n      console.log(keyCode);\n      if(keyCode === 38) {\n        console.log(\"Up ARROW pushed\");\n        if(!(lastArrowPushed === 40)) {\n          console.log(\"ALL IS GOOD\")\n          lastArrowPushed = 38;\n          changeSnakeDirection(snakeDirectionList[38]);\n        }\n      } else if(keyCode ===  39) {\n        console.log(\"Right ARROW pushed\");\n        if(!(lastArrowPushed === 37)) {\n          console.log(\"ALL IS GOOD\");\n          lastArrowPushed = 39;\n          changeSnakeDirection(snakeDirectionList[39]);\n        }\n      } else if(keyCode === 40) {\n        console.log(\"Down ARRAOW pushed\");\n        if(!(lastArrowPushed === 38)) {\n          console.log(\"ALL IS GOOD\");\n          lastArrowPushed = 40;\n          changeSnakeDirection(snakeDirectionList[40]);\n        }\n      } else if(keyCode === 37) {\n        console.log(\"Left ARROW pushed\");\n        if(!(lastArrowPushed === 39)) {\n          console.log(\"All is good\");\n          lastArrowPushed = 37;\n          changeSnakeDirection(snakeDirectionList[37]);\n        }\n      }\n    }\n\n\n  const createApple = () => //change\n    apple.map((_a, i) => Math.floor(Math.random() * (boardGameSize[i] / SCALE))); //change\n\n  const checkCollision = (piece, snk = snake) => { //change\n    if ( //change\n      piece[0] * SCALE >= boardGameSize[0] || //change\n      piece[0] < 0 || //change\n      piece[1] * SCALE >= boardGameSize[1] || //change\n      piece[1] < 0 //change\n    )\n      return true; //change\n\n    for (const segment of snk) { //change\n      if (piece[0] === segment[0] && piece[1] === segment[1]) return true; //change\n    }\n    return false; //change\n  };\n\n  const checkAppleCollision = newSnake => { //change\n    if (newSnake[0][0] === apple[0] && newSnake[0][1] === apple[1]) { //change\n      let newApple = createApple(); //change\n      while (checkCollision(newApple, newSnake)) {//change \n        newApple = createApple();//change \n      }\n      setApple(newApple);//change \n      if(snakeSpeed >= 90) {\n        snakeSpeed = snakeSpeed - 10;\n        setSpeed(snakeSpeed);\n      }\n      return true;//change \n    }\n    return false;//change \n  };\n\n  const gameLoop = () => {//change \n    const snakeCopy = JSON.parse(JSON.stringify(snake));//change \n    const newSnakeHead = [snakeCopy[0][0] + directions[0], snakeCopy[0][1] + directions[1]];//change \n    snakeCopy.unshift(newSnakeHead);//change \n    if (checkCollision(newSnakeHead)) endGame();//change \n    if (!checkAppleCollision(snakeCopy)) snakeCopy.pop();//change \n    setSnake(snakeCopy);//change \n  };\n\n  const startGame = () => {//change \n    snakeSpeed = 180; //change \n    setSnake(SNAKE_START); //change \n    setApple(APPLE_START); //change \n    changeSnakeDirection([0, -1]); //change \n    setSpeed(snakeSpeed); //change \n    setGameOver(false); //change \n  };\n\n  useEffect(() => { //change \n    const context = canvasRef.current.getContext(\"2d\");//change \n    context.setTransform(SCALE, 0, 0, SCALE, 0, 0); //change \n    context.clearRect(0, 0, window.innerWidth, window.innerHeight); //change \n    context.fillStyle = \"black\"; //change \n    snake.forEach(([x, y]) => context.fillRect(x, y, 1, 1)); //change \n    context.fillStyle = \"lightgreen\"; //change \n    context.fillRect(apple[0], apple[1], 1, 1);  //change \n  }, [snake, apple, gameOver]); //change \n\n  return ( //change \n    <div tabIndex=\"0\" onKeyDown={e => snakeKeyMovement(e)}> \n\n      <Button variant=\"contained\" color=\"primary\">\n        Hello World\n      </Button>\n\n\n      <center>\n\n        <canvas\n          style={{ border: \"1px solid black\" }}\n          ref={canvasRef}\n          width={`${boardGameSize[0]}px`}\n          height={`${boardGameSize[1]}px`}\n        />\n\n      </center>\n\n      {gameOver && <div>GAME OVER!</div>}\n      <button onClick={startGame}>Start Game</button>\n    </div>\n  ); //change \n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}