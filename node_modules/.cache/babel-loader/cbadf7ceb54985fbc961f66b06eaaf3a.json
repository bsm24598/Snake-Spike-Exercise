{"ast":null,"code":"var _jsxFileName = \"/home/user/Desktop/Snake-Spike/spike-exercise-snake-game/react-snake-START-HERE/src/App.js\";\nimport Button from '@material-ui/core/Button';\nimport { useInterval } from \"./useInterval\"; //change\n\nimport React, { useState, useRef, useEffect } from \"react\"; //change\n//program variables\n\nconst boardGameSize = [window.innerWidth - 600, window.innerHeight - 200];\nlet totalScore = 0;\nconst snakeCoordinates = [[11, 10]]; //last key that was pushed in the game.\n//this helps avoid key collisions\n//Please refer to snakeKeyMovement method\n\nlet lastArrowPushed = 0;\nlet appleCoordinates = [Math.floor(Math.random() * 5), Math.floor(Math.random() * 5)];\nconst resizing = 34; //change\n\nlet snakeSpeed = 220;\nconst snakeDirectionList = {\n  //change\n  38: [0, -1],\n  // up  //change comment`\n  40: [0, 1],\n  // down  //change comment\n  37: [-1, 0],\n  // left  //change comment\n  39: [1, 0] // right //change comment\n\n}; ///////////////////////////////////\n//Edit everything below this line\n\nconst App = () => {\n  //change\n  const [youLose, setYouLose] = useState(false);\n  const canvasRef = useRef(); //change\n\n  const [snakeShapes, startingSnakePosition] = useState(snakeCoordinates); //change\n\n  const [targetShape, applePosition] = useState(appleCoordinates); //change\n\n  const [directions, changeSnakeDirection] = useState([0, -1]); //change\n\n  const [speed, setSpeed] = useState(null); //change\n\n  useInterval(() => gameLoop(), speed); //change\n\n  const endGame = () => {\n    //change\n    setSpeed(null); //change\n\n    setYouLose(true); //change\n\n    alert(\"Nice Job! You ate \" + totalScore + \" apples!\");\n  };\n\n  const snakeKeyMovement = ({\n    keyCode\n  }) => {\n    console.log(\"snake is moving\");\n    console.log(keyCode);\n\n    if (keyCode === 38) {\n      console.log(\"Up ARROW pushed\");\n\n      if (!(lastArrowPushed === 40)) {\n        console.log(\"ALL IS GOOD\");\n        lastArrowPushed = 38;\n        changeSnakeDirection(snakeDirectionList[38]);\n      }\n    } else if (keyCode === 39) {\n      console.log(\"Right ARROW pushed\");\n\n      if (!(lastArrowPushed === 37)) {\n        console.log(\"ALL IS GOOD\");\n        lastArrowPushed = 39;\n        changeSnakeDirection(snakeDirectionList[39]);\n      }\n    } else if (keyCode === 40) {\n      console.log(\"Down ARRAOW pushed\");\n\n      if (!(lastArrowPushed === 38)) {\n        console.log(\"ALL IS GOOD\");\n        lastArrowPushed = 40;\n        changeSnakeDirection(snakeDirectionList[40]);\n      }\n    } else if (keyCode === 37) {\n      console.log(\"Left ARROW pushed\");\n\n      if (!(lastArrowPushed === 39)) {\n        console.log(\"All is good\");\n        lastArrowPushed = 37;\n        changeSnakeDirection(snakeDirectionList[37]);\n      }\n    }\n  };\n\n  const playSnakeGame = () => {\n    //adjust snake speed here\n    snakeSpeed = 180;\n    appleCoordinates = [Math.floor(Math.random() * 5), Math.floor(Math.random() * 5)];\n    totalScore = 0;\n    applePosition(appleCoordinates);\n    startingSnakePosition(snakeCoordinates);\n    changeSnakeDirection([0, -1]); //change \n\n    setSpeed(snakeSpeed); //change \n\n    setYouLose(false); //change \n  };\n\n  const createNewTargetShape = () => //change\n  targetShape.map((_a, i) => Math.floor(Math.random() * (boardGameSize[i] / resizing))); //change\n\n\n  const snakeEatsTargetShape = (piece, snk = snakeShapes) => {\n    //change\n    if ( //change\n    piece[0] * resizing >= boardGameSize[0] || //change\n    piece[0] < 0 || //change\n    piece[1] * resizing >= boardGameSize[1] || //change\n    piece[1] < 0 //change\n    ) return true; //change\n\n    for (const segment of snk) {\n      //change\n      if (piece[0] === segment[0] && piece[1] === segment[1]) return true; //change\n    }\n\n    return false; //change\n  };\n\n  const snakeEatsApple = arrayCopy => {\n    if (targetShape[0] === arrayCopy[0][0] && targetShape[1] === arrayCopy[0][1]) {\n      //creates a new target shape for the snake\n      let newTargetShape = createNewTargetShape();\n\n      while (snakeEatsTargetShape(newTargetShape, arrayCopy)) {\n        //change \n        newTargetShape = createNewTargetShape(); //change \n      }\n\n      applePosition(newTargetShape); //change \n\n      if (snakeSpeed >= 70) {\n        snakeSpeed = snakeSpeed - 10;\n        setSpeed(snakeSpeed);\n      }\n\n      totalScore += 1;\n      return true; //change \n    }\n\n    return false; //change \n  };\n\n  const gameLoop = () => {\n    //change \n    const snakeCopy = JSON.parse(JSON.stringify(snakeShapes)); //change \n\n    const newSnakeHead = [snakeCopy[0][0] + directions[0], snakeCopy[0][1] + directions[1]]; //change \n\n    snakeCopy.unshift(newSnakeHead); //change \n\n    if (snakeEatsTargetShape(newSnakeHead)) endGame(); //change \n\n    if (!snakeEatsApple(snakeCopy)) snakeCopy.pop(); //change \n\n    startingSnakePosition(snakeCopy); //change \n  };\n\n  useEffect(() => {\n    //change \n    const shapes = canvasRef.current.getContext(\"2d\"); //change \n\n    shapes.setTransform(resizing, 0, 0, resizing, 0, 0); //change \n\n    let snakeGradient = shapes.createLinearGradient(255, 50, 50, 200);\n    snakeGradient.addColorStop(0, \"brown\");\n    snakeGradient.addColorStop(1, \"black\");\n    shapes.clearRect(0, 0, window.innerWidth, window.innerHeight); //change \n\n    snakeShapes.forEach(([x, y]) => {\n      shapes.fillStyle = snakeGradient;\n      shapes.fillRect(x, y, .91, .91);\n    });\n    shapes.fillStyle = \"red\"; //change \n\n    shapes.fillRect(targetShape[0], targetShape[1], 1, 1); //change \n  }, [snakeShapes, targetShape, youLose]); //change \n\n  return (\n    /*#__PURE__*/\n    //change \n    React.createElement(\"div\", {\n      onKeyDown: e => snakeKeyMovement(e),\n      style: {\n        border: \"none\",\n        outline: \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      onClick: playSnakeGame,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 7\n      }\n    }, \"Play\"), /*#__PURE__*/React.createElement(\"center\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      style: {\n        border: \"1px solid black\"\n      },\n      ref: canvasRef,\n      width: `${boardGameSize[0]}px`,\n      height: `${boardGameSize[1]}px`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }\n    })))\n  ); //change \n};\n\nexport default App;","map":{"version":3,"sources":["/home/user/Desktop/Snake-Spike/spike-exercise-snake-game/react-snake-START-HERE/src/App.js"],"names":["Button","useInterval","React","useState","useRef","useEffect","boardGameSize","window","innerWidth","innerHeight","totalScore","snakeCoordinates","lastArrowPushed","appleCoordinates","Math","floor","random","resizing","snakeSpeed","snakeDirectionList","App","youLose","setYouLose","canvasRef","snakeShapes","startingSnakePosition","targetShape","applePosition","directions","changeSnakeDirection","speed","setSpeed","gameLoop","endGame","alert","snakeKeyMovement","keyCode","console","log","playSnakeGame","createNewTargetShape","map","_a","i","snakeEatsTargetShape","piece","snk","segment","snakeEatsApple","arrayCopy","newTargetShape","snakeCopy","JSON","parse","stringify","newSnakeHead","unshift","pop","shapes","current","getContext","setTransform","snakeGradient","createLinearGradient","addColorStop","clearRect","forEach","x","y","fillStyle","fillRect","e","border","outline"],"mappings":";AAAA,OAAOA,MAAP,MAAmB,0BAAnB;AACA,SAASC,WAAT,QAA4B,eAA5B,C,CAA6C;;AAC7C,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,SAAlC,QAAmD,OAAnD,C,CAA4D;AAE5D;;AAEA,MAAMC,aAAa,GAAG,CAACC,MAAM,CAACC,UAAP,GAAoB,GAArB,EAA0BD,MAAM,CAACE,WAAP,GAAqB,GAA/C,CAAtB;AACA,IAAIC,UAAU,GAAG,CAAjB;AACA,MAAMC,gBAAgB,GAAG,CAAC,CAAC,EAAD,EAAK,EAAL,CAAD,CAAzB,C,CACA;AACA;AACA;;AACA,IAAIC,eAAe,GAAG,CAAtB;AACA,IAAIC,gBAAgB,GAAG,CAACC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,CAAD,EAAgCF,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,CAAhC,CAAvB;AACA,MAAMC,QAAQ,GAAG,EAAjB,C,CAAqB;;AACrB,IAAIC,UAAU,GAAG,GAAjB;AACA,MAAMC,kBAAkB,GAAG;AAAG;AAC5B,MAAI,CAAC,CAAD,EAAI,CAAC,CAAL,CADqB;AACZ;AACb,MAAI,CAAC,CAAD,EAAI,CAAJ,CAFqB;AAEb;AACZ,MAAI,CAAC,CAAC,CAAF,EAAK,CAAL,CAHqB;AAGZ;AACb,MAAI,CAAC,CAAD,EAAI,CAAJ,CAJqB,CAId;;AAJc,CAA3B,C,CAQA;AACA;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAE;AAClB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBnB,QAAQ,CAAC,KAAD,CAAtC;AAEA,QAAMoB,SAAS,GAAGnB,MAAM,EAAxB,CAHgB,CAGY;;AAC5B,QAAM,CAACoB,WAAD,EAAcC,qBAAd,IAAuCtB,QAAQ,CAACQ,gBAAD,CAArD,CAJgB,CAIyD;;AACzE,QAAM,CAACe,WAAD,EAAcC,aAAd,IAA+BxB,QAAQ,CAACU,gBAAD,CAA7C,CALgB,CAKiD;;AACjE,QAAM,CAACe,UAAD,EAAaC,oBAAb,IAAqC1B,QAAQ,CAAC,CAAC,CAAD,EAAI,CAAC,CAAL,CAAD,CAAnD,CANgB,CAM8C;;AAC9D,QAAM,CAAC2B,KAAD,EAAQC,QAAR,IAAoB5B,QAAQ,CAAC,IAAD,CAAlC,CAPgB,CAO0B;;AAG1CF,EAAAA,WAAW,CAAC,MAAM+B,QAAQ,EAAf,EAAmBF,KAAnB,CAAX,CAVgB,CAUsB;;AAEtC,QAAMG,OAAO,GAAG,MAAM;AAAE;AACtBF,IAAAA,QAAQ,CAAC,IAAD,CAAR,CADoB,CACJ;;AAChBT,IAAAA,UAAU,CAAC,IAAD,CAAV,CAFoB,CAEF;;AAClBY,IAAAA,KAAK,CAAC,uBAAuBxB,UAAvB,GAAoC,UAArC,CAAL;AACD,GAJD;;AAME,QAAMyB,gBAAgB,GAAG,CAAC;AAACC,IAAAA;AAAD,GAAD,KAAe;AACtCC,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;;AACA,QAAGA,OAAO,KAAK,EAAf,EAAmB;AACjBC,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;;AACA,UAAG,EAAE1B,eAAe,KAAK,EAAtB,CAAH,EAA8B;AAC5ByB,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA1B,QAAAA,eAAe,GAAG,EAAlB;AACAiB,QAAAA,oBAAoB,CAACV,kBAAkB,CAAC,EAAD,CAAnB,CAApB;AACD;AACF,KAPD,MAOO,IAAGiB,OAAO,KAAM,EAAhB,EAAoB;AACzBC,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;;AACA,UAAG,EAAE1B,eAAe,KAAK,EAAtB,CAAH,EAA8B;AAC5ByB,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA1B,QAAAA,eAAe,GAAG,EAAlB;AACAiB,QAAAA,oBAAoB,CAACV,kBAAkB,CAAC,EAAD,CAAnB,CAApB;AACD;AACF,KAPM,MAOA,IAAGiB,OAAO,KAAK,EAAf,EAAmB;AACxBC,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;;AACA,UAAG,EAAE1B,eAAe,KAAK,EAAtB,CAAH,EAA8B;AAC5ByB,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA1B,QAAAA,eAAe,GAAG,EAAlB;AACAiB,QAAAA,oBAAoB,CAACV,kBAAkB,CAAC,EAAD,CAAnB,CAApB;AACD;AACF,KAPM,MAOA,IAAGiB,OAAO,KAAK,EAAf,EAAmB;AACxBC,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;;AACA,UAAG,EAAE1B,eAAe,KAAK,EAAtB,CAAH,EAA8B;AAC5ByB,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA1B,QAAAA,eAAe,GAAG,EAAlB;AACAiB,QAAAA,oBAAoB,CAACV,kBAAkB,CAAC,EAAD,CAAnB,CAApB;AACD;AACF;AACF,GAhCD;;AAkCF,QAAMoB,aAAa,GAAG,MAAM;AAC1B;AACArB,IAAAA,UAAU,GAAG,GAAb;AACAL,IAAAA,gBAAgB,GAAG,CAACC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,CAAD,EAAgCF,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,CAAhC,CAAnB;AACAN,IAAAA,UAAU,GAAG,CAAb;AACAiB,IAAAA,aAAa,CAACd,gBAAD,CAAb;AACAY,IAAAA,qBAAqB,CAACd,gBAAD,CAArB;AAEAkB,IAAAA,oBAAoB,CAAC,CAAC,CAAD,EAAI,CAAC,CAAL,CAAD,CAApB,CAR0B,CAQK;;AAC/BE,IAAAA,QAAQ,CAACb,UAAD,CAAR,CAT0B,CASJ;;AACtBI,IAAAA,UAAU,CAAC,KAAD,CAAV,CAV0B,CAUP;AACpB,GAXD;;AAcA,QAAMkB,oBAAoB,GAAG,MAAM;AACjCd,EAAAA,WAAW,CAACe,GAAZ,CAAgB,CAACC,EAAD,EAAKC,CAAL,KAAW7B,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBV,aAAa,CAACqC,CAAD,CAAb,GAAmB1B,QAApC,CAAX,CAA3B,CADF,CAlEgB,CAmEyE;;;AAEzF,QAAM2B,oBAAoB,GAAG,CAACC,KAAD,EAAQC,GAAG,GAAGtB,WAAd,KAA8B;AAAE;AAC3D,SAAK;AACHqB,IAAAA,KAAK,CAAC,CAAD,CAAL,GAAW5B,QAAX,IAAuBX,aAAa,CAAC,CAAD,CAApC,IAA2C;AAC3CuC,IAAAA,KAAK,CAAC,CAAD,CAAL,GAAW,CADX,IACgB;AAChBA,IAAAA,KAAK,CAAC,CAAD,CAAL,GAAW5B,QAAX,IAAuBX,aAAa,CAAC,CAAD,CAFpC,IAE2C;AAC3CuC,IAAAA,KAAK,CAAC,CAAD,CAAL,GAAW,CAJb,CAIe;AAJf,MAME,OAAO,IAAP,CAPuD,CAO1C;;AAEf,SAAK,MAAME,OAAX,IAAsBD,GAAtB,EAA2B;AAAE;AAC3B,UAAID,KAAK,CAAC,CAAD,CAAL,KAAaE,OAAO,CAAC,CAAD,CAApB,IAA2BF,KAAK,CAAC,CAAD,CAAL,KAAaE,OAAO,CAAC,CAAD,CAAnD,EAAwD,OAAO,IAAP,CAD/B,CAC4C;AACtE;;AACD,WAAO,KAAP,CAZyD,CAY3C;AACf,GAbD;;AAeA,QAAMC,cAAc,GAAGC,SAAS,IAAI;AAClC,QAAKvB,WAAW,CAAC,CAAD,CAAX,KAAmBuB,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,CAApB,IAAyCvB,WAAW,CAAC,CAAD,CAAX,KAAmBuB,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,CAAhE,EAAkF;AAChF;AACA,UAAIC,cAAc,GAAGV,oBAAoB,EAAzC;;AACA,aAAOI,oBAAoB,CAACM,cAAD,EAAiBD,SAAjB,CAA3B,EAAwD;AAAC;AACvDC,QAAAA,cAAc,GAAGV,oBAAoB,EAArC,CADsD,CACd;AACzC;;AACDb,MAAAA,aAAa,CAACuB,cAAD,CAAb,CANgF,CAMlD;;AAC9B,UAAGhC,UAAU,IAAI,EAAjB,EAAqB;AACnBA,QAAAA,UAAU,GAAGA,UAAU,GAAG,EAA1B;AACAa,QAAAA,QAAQ,CAACb,UAAD,CAAR;AACD;;AACDR,MAAAA,UAAU,IAAI,CAAd;AACA,aAAO,IAAP,CAZgF,CAYpE;AACb;;AACD,WAAO,KAAP,CAfkC,CAerB;AACd,GAhBD;;AAmBA,QAAMsB,QAAQ,GAAG,MAAM;AAAC;AACtB,UAAMmB,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe9B,WAAf,CAAX,CAAlB,CADqB,CACqC;;AAC1D,UAAM+B,YAAY,GAAG,CAACJ,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,IAAkBvB,UAAU,CAAC,CAAD,CAA7B,EAAkCuB,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,IAAkBvB,UAAU,CAAC,CAAD,CAA9D,CAArB,CAFqB,CAEmE;;AACxFuB,IAAAA,SAAS,CAACK,OAAV,CAAkBD,YAAlB,EAHqB,CAGW;;AAChC,QAAIX,oBAAoB,CAACW,YAAD,CAAxB,EAAwCtB,OAAO,GAJ1B,CAI6B;;AAClD,QAAI,CAACe,cAAc,CAACG,SAAD,CAAnB,EAAgCA,SAAS,CAACM,GAAV,GALX,CAK2B;;AAChDhC,IAAAA,qBAAqB,CAAC0B,SAAD,CAArB,CANqB,CAMY;AAClC,GAPD;;AAWA9C,EAAAA,SAAS,CAAC,MAAM;AAAE;AAChB,UAAMqD,MAAM,GAAGnC,SAAS,CAACoC,OAAV,CAAkBC,UAAlB,CAA6B,IAA7B,CAAf,CADc,CACoC;;AAClDF,IAAAA,MAAM,CAACG,YAAP,CAAoB5C,QAApB,EAA8B,CAA9B,EAAiC,CAAjC,EAAoCA,QAApC,EAA8C,CAA9C,EAAiD,CAAjD,EAFc,CAEuC;;AACrD,QAAI6C,aAAa,GAAGJ,MAAM,CAACK,oBAAP,CAA4B,GAA5B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,GAAzC,CAApB;AACAD,IAAAA,aAAa,CAACE,YAAd,CAA2B,CAA3B,EAA8B,OAA9B;AACAF,IAAAA,aAAa,CAACE,YAAd,CAA2B,CAA3B,EAA8B,OAA9B;AACAN,IAAAA,MAAM,CAACO,SAAP,CAAiB,CAAjB,EAAoB,CAApB,EAAuB1D,MAAM,CAACC,UAA9B,EAA0CD,MAAM,CAACE,WAAjD,EANc,CAMiD;;AAE/De,IAAAA,WAAW,CAAC0C,OAAZ,CAAoB,CAAC,CAACC,CAAD,EAAIC,CAAJ,CAAD,KAAY;AAC9BV,MAAAA,MAAM,CAACW,SAAP,GAAmBP,aAAnB;AACAJ,MAAAA,MAAM,CAACY,QAAP,CAAgBH,CAAhB,EAAmBC,CAAnB,EAAsB,GAAtB,EAA2B,GAA3B;AACD,KAHD;AAIAV,IAAAA,MAAM,CAACW,SAAP,GAAmB,KAAnB,CAZc,CAYY;;AAC1BX,IAAAA,MAAM,CAACY,QAAP,CAAgB5C,WAAW,CAAC,CAAD,CAA3B,EAAgCA,WAAW,CAAC,CAAD,CAA3C,EAAgD,CAAhD,EAAmD,CAAnD,EAbc,CAa0C;AACzD,GAdQ,EAcN,CAACF,WAAD,EAAcE,WAAd,EAA2BL,OAA3B,CAdM,CAAT,CAlHgB,CAgIyB;;AAEzC;AAAA;AAAS;AACP;AAAK,MAAA,SAAS,EAAEkD,CAAC,IAAIpC,gBAAgB,CAACoC,CAAD,CAArC;AAA0C,MAAA,KAAK,EAAE;AAAEC,QAAAA,MAAM,EAAE,MAAV;AAAkBC,QAAAA,OAAO,EAAE;AAA3B,OAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,WAAhB;AAA4B,MAAA,KAAK,EAAC,WAAlC;AAA8C,MAAA,OAAO,EAAElC,aAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEE;AACE,MAAA,KAAK,EAAE;AAAEiC,QAAAA,MAAM,EAAE;AAAV,OADT;AAEE,MAAA,GAAG,EAAEjD,SAFP;AAGE,MAAA,KAAK,EAAG,GAAEjB,aAAa,CAAC,CAAD,CAAI,IAH7B;AAIE,MAAA,MAAM,EAAG,GAAEA,aAAa,CAAC,CAAD,CAAI,IAJ9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CANF;AADF,IAlIgB,CAqJb;AACJ,CAtJD;;AAwJA,eAAec,GAAf","sourcesContent":["import Button from '@material-ui/core/Button';\nimport { useInterval } from \"./useInterval\"; //change\nimport React, { useState, useRef, useEffect } from \"react\"; //change\n\n//program variables\n\nconst boardGameSize = [window.innerWidth - 600, window.innerHeight - 200];\nlet totalScore = 0;\nconst snakeCoordinates = [[11, 10]];\n//last key that was pushed in the game.\n//this helps avoid key collisions\n//Please refer to snakeKeyMovement method\nlet lastArrowPushed = 0;\nlet appleCoordinates = [Math.floor(Math.random() * 5), Math.floor(Math.random() * 5)];\nconst resizing = 34; //change\nlet snakeSpeed = 220;\nconst snakeDirectionList = {  //change\n  38: [0, -1], // up  //change comment`\n  40: [0, 1], // down  //change comment\n  37: [-1, 0], // left  //change comment\n  39: [1, 0] // right //change comment\n};\n\n\n///////////////////////////////////\n//Edit everything below this line\n\nconst App = () => { //change\n  const [youLose, setYouLose] = useState(false);\n\n  const canvasRef = useRef(); //change\n  const [snakeShapes, startingSnakePosition] = useState(snakeCoordinates); //change\n  const [targetShape, applePosition] = useState(appleCoordinates); //change\n  const [directions, changeSnakeDirection] = useState([0, -1]); //change\n  const [speed, setSpeed] = useState(null); //change\n\n\n  useInterval(() => gameLoop(), speed); //change\n\n  const endGame = () => { //change\n    setSpeed(null); //change\n    setYouLose(true); //change\n    alert(\"Nice Job! You ate \" + totalScore + \" apples!\");\n  };\n\n    const snakeKeyMovement = ({keyCode}) => {\n      console.log(\"snake is moving\");\n      console.log(keyCode);\n      if(keyCode === 38) {\n        console.log(\"Up ARROW pushed\");\n        if(!(lastArrowPushed === 40)) {\n          console.log(\"ALL IS GOOD\")\n          lastArrowPushed = 38;\n          changeSnakeDirection(snakeDirectionList[38]);\n        }\n      } else if(keyCode ===  39) {\n        console.log(\"Right ARROW pushed\");\n        if(!(lastArrowPushed === 37)) {\n          console.log(\"ALL IS GOOD\");\n          lastArrowPushed = 39;\n          changeSnakeDirection(snakeDirectionList[39]);\n        }\n      } else if(keyCode === 40) {\n        console.log(\"Down ARRAOW pushed\");\n        if(!(lastArrowPushed === 38)) {\n          console.log(\"ALL IS GOOD\");\n          lastArrowPushed = 40;\n          changeSnakeDirection(snakeDirectionList[40]);\n        }\n      } else if(keyCode === 37) {\n        console.log(\"Left ARROW pushed\");\n        if(!(lastArrowPushed === 39)) {\n          console.log(\"All is good\");\n          lastArrowPushed = 37;\n          changeSnakeDirection(snakeDirectionList[37]);\n        }\n      }\n    }\n\n  const playSnakeGame = () => {\n    //adjust snake speed here\n    snakeSpeed = 180;\n    appleCoordinates = [Math.floor(Math.random() * 5), Math.floor(Math.random() * 5)];\n    totalScore = 0;\n    applePosition(appleCoordinates);\n    startingSnakePosition(snakeCoordinates);\n\n    changeSnakeDirection([0, -1]); //change \n    setSpeed(snakeSpeed); //change \n    setYouLose(false); //change \n  };\n\n\n  const createNewTargetShape = () => //change\n    targetShape.map((_a, i) => Math.floor(Math.random() * (boardGameSize[i] / resizing))); //change\n\n  const snakeEatsTargetShape = (piece, snk = snakeShapes) => { //change\n    if ( //change\n      piece[0] * resizing >= boardGameSize[0] || //change\n      piece[0] < 0 || //change\n      piece[1] * resizing >= boardGameSize[1] || //change\n      piece[1] < 0 //change\n    )\n      return true; //change\n\n    for (const segment of snk) { //change\n      if (piece[0] === segment[0] && piece[1] === segment[1]) return true; //change\n    }\n    return false; //change\n  };\n\n  const snakeEatsApple = arrayCopy => { \n    if ((targetShape[0] === arrayCopy[0][0]) && (targetShape[1] === arrayCopy[0][1])) {\n      //creates a new target shape for the snake\n      let newTargetShape = createNewTargetShape();\n      while (snakeEatsTargetShape(newTargetShape, arrayCopy)) {//change \n        newTargetShape = createNewTargetShape();//change \n      }\n      applePosition(newTargetShape);//change \n      if(snakeSpeed >= 70) {\n        snakeSpeed = snakeSpeed - 10;\n        setSpeed(snakeSpeed);\n      }\n      totalScore += 1;\n      return true;//change \n    }\n    return false;//change \n  };\n\n\n  const gameLoop = () => {//change \n    const snakeCopy = JSON.parse(JSON.stringify(snakeShapes));//change \n    const newSnakeHead = [snakeCopy[0][0] + directions[0], snakeCopy[0][1] + directions[1]];//change \n    snakeCopy.unshift(newSnakeHead);//change \n    if (snakeEatsTargetShape(newSnakeHead)) endGame();//change \n    if (!snakeEatsApple(snakeCopy)) snakeCopy.pop();//change \n    startingSnakePosition(snakeCopy);//change \n  };\n\n\n\n  useEffect(() => { //change \n    const shapes = canvasRef.current.getContext(\"2d\");//change \n    shapes.setTransform(resizing, 0, 0, resizing, 0, 0); //change \n    let snakeGradient = shapes.createLinearGradient(255, 50, 50, 200);\n    snakeGradient.addColorStop(0, \"brown\");\n    snakeGradient.addColorStop(1, \"black\");\n    shapes.clearRect(0, 0, window.innerWidth, window.innerHeight); //change \n    \n    snakeShapes.forEach(([x, y]) => {\n      shapes.fillStyle = snakeGradient;\n      shapes.fillRect(x, y, .91, .91);\n    });\n    shapes.fillStyle = \"red\"; //change \n    shapes.fillRect(targetShape[0], targetShape[1], 1, 1);  //change \n  }, [snakeShapes, targetShape, youLose]); //change \n\n  return ( //change \n    <div onKeyDown={e => snakeKeyMovement(e)} style={{ border: \"none\", outline: \"none\"  }}  > \n\n      <Button variant=\"contained\" color=\"secondary\" onClick={playSnakeGame}>\n        Play\n      </Button>\n\n      <center>\n\n        <canvas\n          style={{ border: \"1px solid black\" }}\n          ref={canvasRef}\n          width={`${boardGameSize[0]}px`}\n          height={`${boardGameSize[1]}px`}\n        />\n\n      </center>\n\n    </div>\n  ); //change \n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}