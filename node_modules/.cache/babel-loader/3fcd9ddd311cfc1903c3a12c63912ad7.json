{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/user/Desktop/snake-spike-exercise/src/App.js\",\n    _s = $RefreshSig$();\n\n/*\nTeam Eikon - Spike Exercise - Snake Game\n\nPurpose: To get our team familiar with moving and manipulating objects around the DOM with React JS.\n          This will assist us with creating tree visualizations and node transitions \n          for our final project.\n\nCITATIONS: Resources, tutorials, and websites used and referenced for this spike exercise are below.\n\n  1. Snake in 100 Lines Tutorial: https://github.com/weibenfalk/react-snake-starter-files\n  2. INK - ReactJS Console Applications (Snake Tutorial): https://www.youtube.com/watch?v=GaRXxmofjhw\n  3. https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/transform\n  4. https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillRect\n  5. https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\n  6. Snake Tutorial: https://github.com/ChigabigaChannel/react-hour-projects/tree/master/snake-game/src\n                    https://www.youtube.com/watch?v=-oOgsGP3t5o && https://www.youtube.com/watch?v=lgK7OTdT-eo\n  7. SNAKE GAME in React js: https://www.youtube.com/watch?v=SGsRHWu_01U\n  8. Making a snake game using React Hooks: https://dev.to/aligumustosun/making-a-snake-game-using-react-hooks-5606\n  9. React Documentation: https://reactjs.org/docs/refs-and-the-dom.html\n*/\nimport Button from \"@material-ui/core/Button\";\nimport { useInterval } from \"./reactHook\";\nimport React from \"react\";\nimport { useState, useEffect, useRef } from \"react\";\nconst snakeWindowSize = [window.innerWidth - 600, window.innerHeight - 200];\nlet totalScore = 0;\nlet snakeCoordinates = [[11, 10]];\n/*\n  This vairable contains the last arrow key code that was pushed.\n  This helps avoid key collisions with the snake. For example,\n  pressing the left arrow followed by the right arrow can kill the\n  snake if the last arrow key is not kept track of.\n*/\n\nlet lastArrowPushed = 0; //Generates random coordinates for apple placement\n\nlet appleCoordinates = [Math.floor(Math.random() * 5), Math.floor(Math.random() * 5)]; //resizes shape objects\n\nlet resizingFactor = 34; //Controls snake speed\n\nlet snakeSpeed = 220; //Creates a new target rectangle for the snake to eat upon collision\n\nfunction createNewTargetShape(snakeEatsTargetShape, newTargetShape, arrayCopy, createNewTargetShape) {\n  while (snakeEatsTargetShape(newTargetShape, arrayCopy)) {\n    newTargetShape = createNewTargetShape();\n  }\n\n  return newTargetShape;\n}\n/*\n  function getArrowKeyEvent\n  Takes in a key event to direct snake movement.\n  Logic helps avoid collisions with body parts \n  of the snake. (e.g. pressing up arrow followed by down arrow)\n*/\n\n\nfunction getArrowKeyEvent(changeSnakeDirection) {\n  return ({\n    keyCode\n  }) => {\n    console.log(\"snake is moving\");\n    console.log(keyCode);\n\n    if (keyCode === 38) {\n      console.log(\"Up ARROW pushed\");\n\n      if (!(lastArrowPushed === 40)) {\n        console.log(\"ALL IS GOOD\");\n        lastArrowPushed = 38;\n        changeSnakeDirection([0, -1]);\n      }\n    } else if (keyCode === 39) {\n      console.log(\"Right ARROW pushed\");\n\n      if (!(lastArrowPushed === 37)) {\n        console.log(\"ALL IS GOOD\");\n        lastArrowPushed = 39;\n        changeSnakeDirection([1, 0]);\n      }\n    } else if (keyCode === 40) {\n      console.log(\"Down ARRAOW pushed\");\n\n      if (!(lastArrowPushed === 38)) {\n        console.log(\"ALL IS GOOD\");\n        lastArrowPushed = 40;\n        changeSnakeDirection([0, 1]);\n      }\n    } else if (keyCode === 37) {\n      console.log(\"Left ARROW pushed\");\n\n      if (!(lastArrowPushed === 39)) {\n        console.log(\"All is good\");\n        lastArrowPushed = 37;\n        changeSnakeDirection([-1, 0]);\n      }\n    }\n  };\n}\n/*\n  function stopAllAnimation\n    Stops all animation when the game is over.\n*/\n\n\nfunction stopAllAnimation(setSnakeSpeed, playerLoses) {\n  return () => {\n    //Kills the snake speed\n    setSnakeSpeed(null); //sets player loss variable to true\n\n    playerLoses(true); //Give alert message\n\n    alert(\"Nice Job! You ate \" + totalScore + \" apples!\");\n  };\n}\n\nfunction placeNewApple(targetShape) {\n  return () => {\n    return targetShape.map((obj, foodObject) => Math.floor(Math.random() * (snakeWindowSize[foodObject] / resizingFactor)));\n  };\n}\n\nconst App = () => {\n  _s();\n\n  let [gameBackgroundColor, setBackgroundColor] = useState(\"black\");\n  let [gameBorderColor, setBorderColor] = useState(\"lightgreen\");\n  let [youLose, setYouLose] = useState(false);\n  let [snakeShapes, startingSnakePosition] = useState(snakeCoordinates);\n  let [targetShape, targetShapeLocation] = useState(appleCoordinates);\n  let [snakeDirections, changeSnakeDirection] = useState([0, -1]);\n  let [snakeSpeed, setSnakeSpeed] = useState(null);\n  let canvas = useRef();\n  let [snakeColor, setSnakeColor] = useState(\"lightgreen\");\n  let [currentSnakeSize, setSnakeSize] = useState(.92);\n  useInterval(() => snakeController(), snakeSpeed);\n  let stopMovement = stopAllAnimation(setSnakeSpeed, setYouLose);\n  let backgroundButtonClicked = false;\n  const snakeKeyMovement = getArrowKeyEvent(changeSnakeDirection);\n\n  const playSnakeGame = () => {\n    //Sets snake speed upon hitting the play button\n    //This overrides snake speed above.\n    //Adjust here for different speeds.\n    snakeSpeed = 180; //Gives random apple coordinates for next game\n\n    appleCoordinates = [Math.floor(Math.random() * 5), Math.floor(Math.random() * 5)]; //Resets total apple score\n\n    totalScore = 0; //Sets the location of the target shape (apple)\n\n    targetShapeLocation(appleCoordinates); //Sets starting snake position\n\n    startingSnakePosition(snakeCoordinates); //Sets the initial snake direction\n\n    changeSnakeDirection([0, -1]); //Sets snake speed\n\n    setSnakeSpeed(snakeSpeed); //Resets player loss\n\n    setYouLose(false);\n  };\n\n  const increaseSpeed = () => {\n    snakeSpeed = snakeSpeed - 10;\n    setSnakeSpeed(snakeSpeed);\n  };\n\n  const decreaseSpeed = () => {\n    snakeSpeed = snakeSpeed + 10;\n    setSnakeSpeed(snakeSpeed);\n  };\n\n  const quitGame = () => {\n    setYouLose(true);\n    stopAllAnimation(null, true);\n  };\n\n  const changeBackgroundColor = () => {\n    if (gameBackgroundColor === \"black\") {\n      setBackgroundColor(\"lightblue\");\n      setBorderColor(\"black\");\n    } else {\n      setBackgroundColor(\"black\");\n      setBorderColor(\"lightgreen\");\n    }\n  };\n\n  const createNewTargetShape = placeNewApple(targetShape);\n\n  const shapeResizingFactor = (snakeItem, snakeBody = snakeShapes) => {\n    if (snakeItem[0] * resizingFactor >= snakeWindowSize[0] || snakeItem[0] < 0 || snakeItem[1] * resizingFactor >= snakeWindowSize[1] || snakeItem[1] < 0) {\n      return true;\n    }\n\n    for (let snakeShape of snakeBody) {\n      if (snakeItem[0] === snakeShape[0] && snakeItem[1] === snakeShape[1]) return true;\n    }\n\n    return false;\n  };\n\n  const decreaseSnakeSize = () => {\n    setSnakeSize(currentSnakeSize - 0.2);\n  };\n\n  const snakeEatsApple = arrayCopy => {\n    if (targetShape[0] === arrayCopy[0][0] && targetShape[1] === arrayCopy[0][1]) {\n      //creates a new target shape for the snake\n      let newTargetShape = createNewTargetShape();\n      newTargetShape = createNewTargetShape(shapeResizingFactor, newTargetShape, arrayCopy, createNewTargetShape);\n      targetShapeLocation(newTargetShape); //slowly increases snake speed as apples are eaten\n\n      if (snakeSpeed >= 70) {\n        snakeSpeed = snakeSpeed - 10;\n        setSnakeSpeed(snakeSpeed);\n      } //increments score\n\n\n      totalScore += 1;\n      return true;\n    }\n\n    return false;\n  };\n\n  const changeSnakeColor = () => {\n    if (snakeColor === \"lightgreen\") {\n      setSnakeColor(\"purple\");\n    } else {\n      setSnakeColor(\"lightgreen\");\n    }\n  };\n\n  const snakeController = () => {\n    const snakeCopy = JSON.parse(JSON.stringify(snakeShapes)); //creates snake head from array and copies directions over\n\n    const newSnakeHead = [snakeCopy[0][0] + snakeDirections[0], snakeCopy[0][1] + snakeDirections[1]];\n    snakeCopy.unshift(newSnakeHead);\n\n    if (shapeResizingFactor(newSnakeHead)) {\n      stopMovement();\n    }\n\n    if (!snakeEatsApple(snakeCopy)) {\n      snakeCopy.pop();\n    }\n\n    startingSnakePosition(snakeCopy);\n  };\n\n  useEffect(() => {\n    const allShapes = canvas.current.getContext(\"2d\");\n    allShapes.setTransform(resizingFactor, 0, 0, resizingFactor, 0, 0);\n    let snakeGradient = allShapes.createLinearGradient(255, 50, 50, 200); //creates color of snake body parts\n\n    snakeGradient.addColorStop(0, snakeColor);\n    snakeGradient.addColorStop(1, snakeColor);\n    allShapes.clearRect(0, 0, window.innerWidth, window.innerHeight);\n    snakeShapes.forEach(([x, y]) => {\n      allShapes.fillStyle = snakeGradient; //size of snake body parts (.91)\n\n      allShapes.fillRect(x, y, currentSnakeSize, currentSnakeSize);\n    });\n    allShapes.fillStyle = \"red\";\n    allShapes.fillRect(targetShape[0], targetShape[1], currentSnakeSize, currentSnakeSize);\n  }, [snakeShapes, targetShape, youLose]);\n\n  const increaseSnakeSize = () => {\n    setSnakeSize(currentSnakeSize + 0.2);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onKeyDown: e => snakeKeyMovement(e),\n    style: {\n      border: \"none\",\n      outline: \"none\",\n      backgroundColor: gameBackgroundColor\n    },\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      color: \"secondary\",\n      onClick: playSnakeGame,\n      children: \"Play\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      color: \"secondary\",\n      onClick: increaseSpeed,\n      children: \"Faster\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      color: \"secondary\",\n      onClick: decreaseSpeed,\n      children: \"Slower\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      color: \"secondary\",\n      onClick: quitGame,\n      children: \"Quit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      color: \"secondary\",\n      onClick: changeBackgroundColor,\n      children: \"Change Background\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      color: \"secondary\",\n      onClick: changeSnakeColor,\n      children: \"Change Snake Color\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      color: \"secondary\",\n      onClick: increaseSnakeSize,\n      children: \"Increase Size\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      color: \"secondary\",\n      onClick: decreaseSnakeSize,\n      children: \"Decrease Size\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"center\", {\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        style: {\n          border: \"10px solid\",\n          borderColor: gameBorderColor\n        },\n        ref: canvas,\n        height: `${snakeWindowSize[1]}px`,\n        width: `${snakeWindowSize[0]}px`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 302,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"NHvikx/bU6ZOZs41qF2m5cEqKn4=\", false, function () {\n  return [useInterval];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/user/Desktop/snake-spike-exercise/src/App.js"],"names":["Button","useInterval","React","useState","useEffect","useRef","snakeWindowSize","window","innerWidth","innerHeight","totalScore","snakeCoordinates","lastArrowPushed","appleCoordinates","Math","floor","random","resizingFactor","snakeSpeed","createNewTargetShape","snakeEatsTargetShape","newTargetShape","arrayCopy","getArrowKeyEvent","changeSnakeDirection","keyCode","console","log","stopAllAnimation","setSnakeSpeed","playerLoses","alert","placeNewApple","targetShape","map","obj","foodObject","App","gameBackgroundColor","setBackgroundColor","gameBorderColor","setBorderColor","youLose","setYouLose","snakeShapes","startingSnakePosition","targetShapeLocation","snakeDirections","canvas","snakeColor","setSnakeColor","currentSnakeSize","setSnakeSize","snakeController","stopMovement","backgroundButtonClicked","snakeKeyMovement","playSnakeGame","increaseSpeed","decreaseSpeed","quitGame","changeBackgroundColor","shapeResizingFactor","snakeItem","snakeBody","snakeShape","decreaseSnakeSize","snakeEatsApple","changeSnakeColor","snakeCopy","JSON","parse","stringify","newSnakeHead","unshift","pop","allShapes","current","getContext","setTransform","snakeGradient","createLinearGradient","addColorStop","clearRect","forEach","x","y","fillStyle","fillRect","increaseSnakeSize","e","border","outline","backgroundColor","borderColor"],"mappings":"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","sourcesContent":["/*\nTeam Eikon - Spike Exercise - Snake Game\n\nPurpose: To get our team familiar with moving and manipulating objects around the DOM with React JS.\n          This will assist us with creating tree visualizations and node transitions \n          for our final project.\n\nCITATIONS: Resources, tutorials, and websites used and referenced for this spike exercise are below.\n\n  1. Snake in 100 Lines Tutorial: https://github.com/weibenfalk/react-snake-starter-files\n  2. INK - ReactJS Console Applications (Snake Tutorial): https://www.youtube.com/watch?v=GaRXxmofjhw\n  3. https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/transform\n  4. https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillRect\n  5. https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\n  6. Snake Tutorial: https://github.com/ChigabigaChannel/react-hour-projects/tree/master/snake-game/src\n                    https://www.youtube.com/watch?v=-oOgsGP3t5o && https://www.youtube.com/watch?v=lgK7OTdT-eo\n  7. SNAKE GAME in React js: https://www.youtube.com/watch?v=SGsRHWu_01U\n  8. Making a snake game using React Hooks: https://dev.to/aligumustosun/making-a-snake-game-using-react-hooks-5606\n  9. React Documentation: https://reactjs.org/docs/refs-and-the-dom.html\n*/\n\nimport Button from \"@material-ui/core/Button\";\nimport { useInterval as useInterval } from \"./reactHook\";\nimport React from \"react\";\nimport { useState, useEffect, useRef } from \"react\";\n\nconst snakeWindowSize = [window.innerWidth - 600, window.innerHeight - 200];\nlet totalScore = 0;\nlet snakeCoordinates = [[11, 10]];\n/*\n  This vairable contains the last arrow key code that was pushed.\n  This helps avoid key collisions with the snake. For example,\n  pressing the left arrow followed by the right arrow can kill the\n  snake if the last arrow key is not kept track of.\n*/\nlet lastArrowPushed = 0;\n\n//Generates random coordinates for apple placement\nlet appleCoordinates = [\n  Math.floor(Math.random() * 5),\n  Math.floor(Math.random() * 5),\n];\n//resizes shape objects\nlet resizingFactor = 34;\n//Controls snake speed\nlet snakeSpeed = 220;\n\n//Creates a new target rectangle for the snake to eat upon collision\nfunction createNewTargetShape(\n  snakeEatsTargetShape,\n  newTargetShape,\n  arrayCopy,\n  createNewTargetShape\n) {\n  while (snakeEatsTargetShape(newTargetShape, arrayCopy)) {\n    newTargetShape = createNewTargetShape();\n  }\n  return newTargetShape;\n}\n\n/*\n  function getArrowKeyEvent\n  Takes in a key event to direct snake movement.\n  Logic helps avoid collisions with body parts \n  of the snake. (e.g. pressing up arrow followed by down arrow)\n*/\nfunction getArrowKeyEvent(changeSnakeDirection) {\n  return ({ keyCode }) => {\n    console.log(\"snake is moving\");\n    console.log(keyCode);\n    if (keyCode === 38) {\n      console.log(\"Up ARROW pushed\");\n      if (!(lastArrowPushed === 40)) {\n        console.log(\"ALL IS GOOD\");\n        lastArrowPushed = 38;\n        changeSnakeDirection([0, -1]);\n      }\n    } else if (keyCode === 39) {\n      console.log(\"Right ARROW pushed\");\n      if (!(lastArrowPushed === 37)) {\n        console.log(\"ALL IS GOOD\");\n        lastArrowPushed = 39;\n        changeSnakeDirection([1, 0]);\n      }\n    } else if (keyCode === 40) {\n      console.log(\"Down ARRAOW pushed\");\n      if (!(lastArrowPushed === 38)) {\n        console.log(\"ALL IS GOOD\");\n        lastArrowPushed = 40;\n        changeSnakeDirection([0, 1]);\n      }\n    } else if (keyCode === 37) {\n      console.log(\"Left ARROW pushed\");\n      if (!(lastArrowPushed === 39)) {\n        console.log(\"All is good\");\n        lastArrowPushed = 37;\n        changeSnakeDirection([-1, 0]);\n      }\n    }\n  };\n}\n\n/*\n  function stopAllAnimation\n    Stops all animation when the game is over.\n*/\nfunction stopAllAnimation(setSnakeSpeed, playerLoses) {\n  return () => {\n    //Kills the snake speed\n    setSnakeSpeed(null);\n    //sets player loss variable to true\n    playerLoses(true);\n    //Give alert message\n    alert(\"Nice Job! You ate \" + totalScore + \" apples!\");\n  };\n}\n\nfunction placeNewApple(targetShape) {\n  return () => {\n    return targetShape.map((obj, foodObject) => Math.floor(Math.random() * (snakeWindowSize[foodObject] / resizingFactor)));\n  };\n}\n\nconst App = () => {\n  let [gameBackgroundColor, setBackgroundColor] = useState(\"black\");\n  let [gameBorderColor, setBorderColor] = useState(\"lightgreen\");\n  let [youLose, setYouLose] = useState(false);\n  let [snakeShapes, startingSnakePosition] = useState(snakeCoordinates);\n  let [targetShape, targetShapeLocation] = useState(appleCoordinates);\n  let [snakeDirections, changeSnakeDirection] = useState([0, -1]);\n  let [snakeSpeed, setSnakeSpeed] = useState(null);\n  let canvas = useRef();\n  let [snakeColor, setSnakeColor] = useState(\"lightgreen\");\n  let [currentSnakeSize, setSnakeSize] = useState(.92);\n\n\n  useInterval(() => snakeController(), snakeSpeed);\n\n  let stopMovement = stopAllAnimation(setSnakeSpeed, setYouLose);\n  let backgroundButtonClicked = false;\n\n  const snakeKeyMovement = getArrowKeyEvent(changeSnakeDirection);\n\n  const playSnakeGame = () => {\n    //Sets snake speed upon hitting the play button\n    //This overrides snake speed above.\n    //Adjust here for different speeds.\n    snakeSpeed = 180;\n    //Gives random apple coordinates for next game\n    appleCoordinates = [\n      Math.floor(Math.random() * 5),\n      Math.floor(Math.random() * 5),\n    ];\n    //Resets total apple score\n    totalScore = 0;\n    //Sets the location of the target shape (apple)\n    targetShapeLocation(appleCoordinates);\n    //Sets starting snake position\n    startingSnakePosition(snakeCoordinates);\n    //Sets the initial snake direction\n    changeSnakeDirection([0, -1]);\n    //Sets snake speed\n    setSnakeSpeed(snakeSpeed);\n    //Resets player loss\n    setYouLose(false);\n  };\n\n  const increaseSpeed = () => {\n    snakeSpeed = snakeSpeed - 10;\n    setSnakeSpeed(snakeSpeed);\n  };\n\n  const decreaseSpeed = () => {\n    snakeSpeed = snakeSpeed + 10;\n    setSnakeSpeed(snakeSpeed);\n  };\n\n  const quitGame = () => {\n    setYouLose(true);\n    stopAllAnimation(null, true);\n  };\n\n  const changeBackgroundColor = () => {\n    if (gameBackgroundColor === \"black\") {\n      setBackgroundColor(\"lightblue\");\n      setBorderColor(\"black\");\n    } else {\n      setBackgroundColor(\"black\");\n      setBorderColor(\"lightgreen\");\n    }\n  };\n\n  const createNewTargetShape = placeNewApple(targetShape);\n\n  const shapeResizingFactor = (snakeItem, snakeBody = snakeShapes) => {\n    if (\n      snakeItem[0] * resizingFactor >= snakeWindowSize[0] ||\n      snakeItem[0] < 0 ||\n      snakeItem[1] * resizingFactor >= snakeWindowSize[1] ||\n      snakeItem[1] < 0\n    ) {\n      return true;\n    }\n    for (let snakeShape of snakeBody) {\n      if (snakeItem[0] === snakeShape[0] && snakeItem[1] === snakeShape[1])\n        return true;\n    }\n    return false;\n  };\n\n  const decreaseSnakeSize = () => \n  {\n    setSnakeSize(currentSnakeSize - 0.2);\n  };\n\n  const snakeEatsApple = (arrayCopy) => \n  {\n    if (\n      targetShape[0] === arrayCopy[0][0] && targetShape[1] === arrayCopy[0][1]\n    ) {\n      //creates a new target shape for the snake\n      let newTargetShape = createNewTargetShape();\n      newTargetShape = createNewTargetShape(\n        shapeResizingFactor,\n        newTargetShape,\n        arrayCopy,\n        createNewTargetShape\n      );\n      targetShapeLocation(newTargetShape);\n      //slowly increases snake speed as apples are eaten\n      if (snakeSpeed >= 70) \n      {\n        snakeSpeed = snakeSpeed - 10;\n        setSnakeSpeed(snakeSpeed);\n      }\n      //increments score\n      totalScore += 1;\n      return true;\n    }\n    return false;\n  };\n\n  const changeSnakeColor = () => {\n    if (snakeColor === \"lightgreen\") {\n      setSnakeColor(\"purple\");\n    } else {\n      setSnakeColor(\"lightgreen\");\n    }\n  };\n\n  const snakeController = () => {\n    const snakeCopy = JSON.parse(JSON.stringify(snakeShapes));\n    //creates snake head from array and copies directions over\n    const newSnakeHead = [\n      snakeCopy[0][0] + snakeDirections[0],\n      snakeCopy[0][1] + snakeDirections[1],\n    ];\n    snakeCopy.unshift(newSnakeHead);\n    if (shapeResizingFactor(newSnakeHead)) {\n      stopMovement();\n    }\n    if (!snakeEatsApple(snakeCopy)) {\n      snakeCopy.pop();\n    }\n    startingSnakePosition(snakeCopy);\n  };\n\n  useEffect(() => {\n    const allShapes = canvas.current.getContext(\"2d\");\n    allShapes.setTransform(resizingFactor, 0, 0, resizingFactor, 0, 0);\n    let snakeGradient = allShapes.createLinearGradient(255, 50, 50, 200);\n\n    //creates color of snake body parts\n    snakeGradient.addColorStop(0, snakeColor);\n    snakeGradient.addColorStop(1, snakeColor);\n    allShapes.clearRect(0, 0, window.innerWidth, window.innerHeight);\n\n    snakeShapes.forEach(([x, y]) => {\n      allShapes.fillStyle = snakeGradient;\n\n      //size of snake body parts (.91)\n      allShapes.fillRect(x, y, currentSnakeSize, currentSnakeSize);\n    });\n\n\n    allShapes.fillStyle = \"red\";\n    allShapes.fillRect(\n      targetShape[0],\n      targetShape[1],\n      currentSnakeSize,\n      currentSnakeSize\n    );\n  }, [snakeShapes, targetShape, youLose]);\n\n  const increaseSnakeSize = () => \n  {\n    setSnakeSize(currentSnakeSize + 0.2);\n  };\n\n\n  return (\n    <div \n      onKeyDown={(e) => snakeKeyMovement(e)}\n      style={{\n        border: \"none\",\n        outline: \"none\",\n        backgroundColor: gameBackgroundColor,\n      }}\n    >\n      <Button color=\"secondary\" onClick={playSnakeGame}>\n        Play\n      </Button>\n      <Button color=\"secondary\" onClick={increaseSpeed}>\n        Faster\n      </Button>\n      <Button color=\"secondary\" onClick={decreaseSpeed}>\n        Slower\n      </Button>\n      <Button color=\"secondary\" onClick={quitGame}>\n        Quit\n      </Button>\n      <Button color=\"secondary\" onClick={changeBackgroundColor}>\n        Change Background\n      </Button>\n      <Button color=\"secondary\" onClick={changeSnakeColor}>\n        Change Snake Color\n      </Button>\n      <Button color=\"secondary\" onClick={increaseSnakeSize}>\n        Increase Size\n      </Button>\n      <Button color=\"secondary\" onClick={decreaseSnakeSize}>\n        Decrease Size\n      </Button>\n      <center>\n        <canvas style={{ border: \"10px solid\", borderColor: gameBorderColor }} \n        ref={canvas} height={`${snakeWindowSize[1]}px`} \n        width={`${snakeWindowSize[0]}px`}/>\n      </center>\n    </div>\n  );\n};\nexport default App;\n"]},"metadata":{},"sourceType":"module"}